{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\nimport { useEthers } from \"@usedapp/core\";\nimport axios from \"axios\";\nconst useGetStakedNFTs = plan => {\n  _s();\n  const [ids, setIds] = useState([]);\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\n  const {\n    account\n  } = useEthers();\n  useEffect(() => {\n    const fetchIds = async () => {\n      try {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://data-seed-prebsc-1-s3.binance.org:8545\");\n        const contract = new ethers.Contract(addresses.staking, abis.staking, provider);\n        const ids = await contract.getStakedTokens(plan, account);\n        setIds(ids);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    async function getNftsData(userNfts) {\n      const tokenData = [];\n      for (var j = 0; j < (userNfts === null || userNfts === void 0 ? void 0 : userNfts.length); j++) {\n        const dsdcMetaData = await axios.get(`https://bafybeigmbv6qevyposswcncodvket6bl34chc4j6326akxg2xj6arkmfwu.ipfs.nftstorage.link/${userNfts[j]}.json`);\n        const nftTokenData = {\n          img: `https://drunkskunksdc.mypinata.cloud/ipfs/${dsdcMetaData.data.image.slice(7)}`,\n          title: dsdcMetaData.data.name,\n          tokenId: userNfts[j]\n        };\n        tokenData.push(nftTokenData);\n      }\n      return tokenData;\n    }\n    async function getData() {\n      const tokenData = await getNftsData(ids.map(e => e.toString()));\n      setTokensOfOwner(tokenData);\n    }\n    fetchIds();\n    getData();\n  }, [account, plan, ids]);\n  return tokensOfOwner;\n};\n_s(useGetStakedNFTs, \"skBsfiCN/kfNOWkjLXPbBa0q9W4=\", false, function () {\n  return [useEthers];\n});\nexport default useGetStakedNFTs;","map":{"version":3,"names":["useState","useEffect","ethers","addresses","abis","useEthers","axios","useGetStakedNFTs","plan","_s","ids","setIds","tokensOfOwner","setTokensOfOwner","account","fetchIds","provider","providers","JsonRpcProvider","contract","Contract","staking","getStakedTokens","error","console","getNftsData","userNfts","tokenData","j","length","dsdcMetaData","get","nftTokenData","img","data","image","slice","title","name","tokenId","push","getData","map","e","toString"],"sources":["D:/pcs/dsdc-dashboard/packages/react-app/src/hooks/useGetStakedNFTs.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { useEthers } from \"@usedapp/core\";\r\nimport axios from \"axios\";\r\n\r\nconst useGetStakedNFTs = (plan) => {\r\n  const [ids, setIds] = useState([]);\r\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\r\n  const { account } = useEthers();\r\n  useEffect(() => {\r\n    const fetchIds = async () => {\r\n      try {\r\n        const provider = new ethers.providers.JsonRpcProvider(\r\n          \"https://data-seed-prebsc-1-s3.binance.org:8545\"\r\n        );\r\n        const contract = new ethers.Contract(\r\n          addresses.staking,\r\n          abis.staking,\r\n          provider\r\n        );\r\n        const ids = await contract.getStakedTokens(plan, account);\r\n        setIds(ids);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n    async function getNftsData(userNfts) {\r\n      const tokenData = [];\r\n      for (var j = 0; j < userNfts?.length; j++) {\r\n        const dsdcMetaData = await axios.get(\r\n          `https://bafybeigmbv6qevyposswcncodvket6bl34chc4j6326akxg2xj6arkmfwu.ipfs.nftstorage.link/${userNfts[j]}.json`\r\n        );\r\n        const nftTokenData = {\r\n          img: `https://drunkskunksdc.mypinata.cloud/ipfs/${dsdcMetaData.data.image.slice(\r\n            7\r\n          )}`,\r\n          title: dsdcMetaData.data.name,\r\n          tokenId: userNfts[j],\r\n        };\r\n        tokenData.push(nftTokenData);\r\n      }\r\n\r\n      return tokenData;\r\n    }\r\n    async function getData() {\r\n      const tokenData = await getNftsData(ids.map((e) => e.toString()));\r\n      setTokensOfOwner(tokenData);\r\n    }\r\n    fetchIds();\r\n    getData();\r\n  }, [account, plan, ids]);\r\n\r\n  return tokensOfOwner;\r\n};\r\n\r\nexport default useGetStakedNFTs;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,EAAEC,IAAI,QAAQ,2BAA2B;AAC3D,SAASC,SAAS,QAAQ,eAAe;AACzC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM;IAAEc;EAAQ,CAAC,GAAGT,SAAS,EAAE;EAC/BJ,SAAS,CAAC,MAAM;IACd,MAAMc,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,SAAS,CAACC,eAAe,CACnD,gDAAgD,CACjD;QACD,MAAMC,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,QAAQ,CAClCjB,SAAS,CAACkB,OAAO,EACjBjB,IAAI,CAACiB,OAAO,EACZL,QAAQ,CACT;QACD,MAAMN,GAAG,GAAG,MAAMS,QAAQ,CAACG,eAAe,CAACd,IAAI,EAAEM,OAAO,CAAC;QACzDH,MAAM,CAACD,GAAG,CAAC;MACb,CAAC,CAAC,OAAOa,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IACD,eAAeE,WAAWA,CAACC,QAAQ,EAAE;MACnC,MAAMC,SAAS,GAAG,EAAE;MACpB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAGF,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,GAAED,CAAC,EAAE,EAAE;QACzC,MAAME,YAAY,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CACjC,4FAA2FL,QAAQ,CAACE,CAAC,CAAE,OAAM,CAC/G;QACD,MAAMI,YAAY,GAAG;UACnBC,GAAG,EAAG,6CAA4CH,YAAY,CAACI,IAAI,CAACC,KAAK,CAACC,KAAK,CAC7E,CAAC,CACD,EAAC;UACHC,KAAK,EAAEP,YAAY,CAACI,IAAI,CAACI,IAAI;UAC7BC,OAAO,EAAEb,QAAQ,CAACE,CAAC;QACrB,CAAC;QACDD,SAAS,CAACa,IAAI,CAACR,YAAY,CAAC;MAC9B;MAEA,OAAOL,SAAS;IAClB;IACA,eAAec,OAAOA,CAAA,EAAG;MACvB,MAAMd,SAAS,GAAG,MAAMF,WAAW,CAACf,GAAG,CAACgC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,QAAQ,EAAE,CAAC,CAAC;MACjE/B,gBAAgB,CAACc,SAAS,CAAC;IAC7B;IACAZ,QAAQ,EAAE;IACV0B,OAAO,EAAE;EACX,CAAC,EAAE,CAAC3B,OAAO,EAAEN,IAAI,EAAEE,GAAG,CAAC,CAAC;EAExB,OAAOE,aAAa;AACtB,CAAC;AAACH,EAAA,CAhDIF,gBAAgB;EAAA,QAGAF,SAAS;AAAA;AA+C/B,eAAeE,gBAAgB"},"metadata":{},"sourceType":"module"}
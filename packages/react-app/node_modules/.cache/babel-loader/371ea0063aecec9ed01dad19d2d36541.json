{"ast":null,"code":"var _regeneratorRuntime = require(\"D:/pcs/dsdc-dashboard/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"D:/pcs/dsdc-dashboard/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\n\nmodule.exports = function createAsyncMiddleware(asyncMiddleware) {\n  return function (req, res, next, end) {\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    var resolveNextPromise;\n    var nextPromise = new Promise(function (resolve) {\n      resolveNextPromise = resolve;\n    });\n    var returnHandlerCallback, nextWasCalled;\n    var asyncNext = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              nextWasCalled = true;\n              next(function (callback) {\n                // eslint-disable-line callback-return\n                returnHandlerCallback = callback;\n                resolveNextPromise();\n              });\n              _context.next = 4;\n              return nextPromise;\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function asyncNext() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    asyncMiddleware(req, res, asyncNext).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!nextWasCalled) {\n              _context2.next = 6;\n              break;\n            }\n            _context2.next = 3;\n            return nextPromise;\n          case 3:\n            // we must wait until the return handler is called\n            returnHandlerCallback(null);\n            _context2.next = 7;\n            break;\n          case 6:\n            end(null);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }))).catch(function (error) {\n      if (returnHandlerCallback) {\n        returnHandlerCallback(error);\n      } else {\n        end(error);\n      }\n    });\n  };\n};","map":{"version":3,"names":["module","exports","createAsyncMiddleware","asyncMiddleware","req","res","next","end","resolveNextPromise","nextPromise","Promise","resolve","returnHandlerCallback","nextWasCalled","asyncNext","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","callback","stop","apply","arguments","then","_callee2","_callee2$","_context2","catch","error"],"sources":["D:/pcs/dsdc-dashboard/node_modules/json-rpc-engine/src/createAsyncMiddleware.js"],"sourcesContent":["/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\n\nmodule.exports = function createAsyncMiddleware (asyncMiddleware) {\n  return (req, res, next, end) => {\n\n    // nextPromise is the key to the implementation\n    // it is resolved by the return handler passed to the\n    // \"next\" function\n    let resolveNextPromise\n    const nextPromise = new Promise((resolve) => {\n      resolveNextPromise = resolve\n    })\n\n    let returnHandlerCallback, nextWasCalled\n\n    const asyncNext = async () => {\n\n      nextWasCalled = true\n\n      next((callback) => { // eslint-disable-line callback-return\n        returnHandlerCallback = callback\n        resolveNextPromise()\n      })\n      await nextPromise\n    }\n\n    asyncMiddleware(req, res, asyncNext)\n      .then(async () => {\n        if (nextWasCalled) {\n          await nextPromise // we must wait until the return handler is called\n          returnHandlerCallback(null)\n        } else {\n          end(null)\n        }\n      })\n      .catch((error) => {\n        if (returnHandlerCallback) {\n          returnHandlerCallback(error)\n        } else {\n          end(error)\n        }\n      })\n  }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAA,MAAM,CAACC,OAAO,GAAG,SAASC,qBAAqBA,CAAEC,eAAe,EAAE;EAChE,OAAO,UAACC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG,EAAK;IAE9B;IACA;IACA;IACA,IAAIC,kBAAkB;IACtB,IAAMC,WAAW,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;MAC3CH,kBAAkB,GAAGG,OAAO;IAC9B,CAAC,CAAC;IAEF,IAAIC,qBAAqB,EAAEC,aAAa;IAExC,IAAMC,SAAS;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAAA;QAAA,OAAAF,mBAAA,GAAAG,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAhB,IAAA;YAAA;cAEhBO,aAAa,GAAG,IAAI;cAEpBP,IAAI,CAAC,UAACkB,QAAQ,EAAK;gBAAE;gBACnBZ,qBAAqB,GAAGY,QAAQ;gBAChChB,kBAAkB,EAAE;cACtB,CAAC,CAAC;cAAAc,QAAA,CAAAhB,IAAA;cAAA,OACIG,WAAW;YAAA;YAAA;cAAA,OAAAa,QAAA,CAAAG,IAAA;UAAA;QAAA,GAAAN,OAAA;MAAA,CAClB;MAAA,gBATKL,SAASA,CAAA;QAAA,OAAAC,IAAA,CAAAW,KAAA,OAAAC,SAAA;MAAA;IAAA,GASd;IAEDxB,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAES,SAAS,CAAC,CACjCc,IAAI,eAAAZ,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAW,SAAA;MAAA,OAAAZ,mBAAA,GAAAG,IAAA,UAAAU,UAAAC,SAAA;QAAA,kBAAAA,SAAA,CAAAR,IAAA,GAAAQ,SAAA,CAAAzB,IAAA;UAAA;YAAA,KACAO,aAAa;cAAAkB,SAAA,CAAAzB,IAAA;cAAA;YAAA;YAAAyB,SAAA,CAAAzB,IAAA;YAAA,OACTG,WAAW;UAAA;YAAC;YAClBG,qBAAqB,CAAC,IAAI,CAAC;YAAAmB,SAAA,CAAAzB,IAAA;YAAA;UAAA;YAE3BC,GAAG,CAAC,IAAI,CAAC;UAAA;UAAA;YAAA,OAAAwB,SAAA,CAAAN,IAAA;QAAA;MAAA,GAAAI,QAAA;IAAA,CAEZ,GAAC,CACDG,KAAK,CAAC,UAACC,KAAK,EAAK;MAChB,IAAIrB,qBAAqB,EAAE;QACzBA,qBAAqB,CAACqB,KAAK,CAAC;MAC9B,CAAC,MAAM;QACL1B,GAAG,CAAC0B,KAAK,CAAC;MACZ;IACF,CAAC,CAAC;EACN,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script"}
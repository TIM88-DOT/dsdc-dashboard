{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.sha256 = exports.keccak256 = exports.pack = void 0;\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\nvar sha2_1 = require(\"@ethersproject/sha2\");\nvar strings_1 = require(\"@ethersproject/strings\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return (0, bytes_1.zeroPad)(value, 32);\n      }\n      return (0, bytes_1.arrayify)(value);\n    case \"string\":\n      return (0, strings_1.toUtf8Bytes)(value);\n    case \"bytes\":\n      return (0, bytes_1.arrayify)(value);\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n      if (isArray) {\n        return (0, bytes_1.zeroPad)(value, 32);\n      }\n      return (0, bytes_1.arrayify)(value);\n  }\n  var match = type.match(regexNumber);\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    var size = parseInt(match[2] || \"256\");\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      logger.throwArgumentError(\"invalid number type\", \"type\", type);\n    }\n    if (isArray) {\n      size = 256;\n    }\n    value = bignumber_1.BigNumber.from(value).toTwos(size);\n    return (0, bytes_1.zeroPad)(value, size / 8);\n  }\n  match = type.match(regexBytes);\n  if (match) {\n    var size = parseInt(match[1]);\n    if (String(size) !== match[1] || size === 0 || size > 32) {\n      logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n    }\n    if ((0, bytes_1.arrayify)(value).byteLength !== size) {\n      logger.throwArgumentError(\"invalid value for \" + type, \"value\", value);\n    }\n    if (isArray) {\n      return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));\n    }\n    return value;\n  }\n  match = type.match(regexArray);\n  if (match && Array.isArray(value)) {\n    var baseType_1 = match[1];\n    var count = parseInt(match[2] || String(value.length));\n    if (count != value.length) {\n      logger.throwArgumentError(\"invalid array length for \" + type, \"value\", value);\n    }\n    var result_1 = [];\n    value.forEach(function (value) {\n      result_1.push(_pack(baseType_1, value, true));\n    });\n    return (0, bytes_1.concat)(result_1);\n  }\n  return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n  if (types.length != values.length) {\n    logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n  }\n  var tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));\n}\nexports.pack = pack;\nfunction keccak256(types, values) {\n  return (0, keccak256_1.keccak256)(pack(types, values));\n}\nexports.keccak256 = keccak256;\nfunction sha256(types, values) {\n  return (0, sha2_1.sha256)(pack(types, values));\n}\nexports.sha256 = sha256;","map":{"version":3,"sources":["../src.ts/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = exports.keccak256 = exports.pack = void 0;\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\nvar bytes_1 = require(\"@ethersproject/bytes\");\nvar keccak256_1 = require(\"@ethersproject/keccak256\");\nvar sha2_1 = require(\"@ethersproject/sha2\");\nvar strings_1 = require(\"@ethersproject/strings\");\nvar regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nvar regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nvar regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nvar Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nvar logger_1 = require(\"@ethersproject/logger\");\nvar _version_1 = require(\"./_version\");\nvar logger = new logger_1.Logger(_version_1.version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n        case \"string\":\n            return (0, strings_1.toUtf8Bytes)(value);\n        case \"bytes\":\n            return (0, bytes_1.arrayify)(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return (0, bytes_1.zeroPad)(value, 32);\n            }\n            return (0, bytes_1.arrayify)(value);\n    }\n    var match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        var size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = bignumber_1.BigNumber.from(value).toTwos(size);\n        return (0, bytes_1.zeroPad)(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        var size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if ((0, bytes_1.arrayify)(value).byteLength !== size) {\n            logger.throwArgumentError(\"invalid value for \" + type, \"value\", value);\n        }\n        if (isArray) {\n            return (0, bytes_1.arrayify)((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        var baseType_1 = match[1];\n        var count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(\"invalid array length for \" + type, \"value\", value);\n        }\n        var result_1 = [];\n        value.forEach(function (value) {\n            result_1.push(_pack(baseType_1, value, true));\n        });\n        return (0, bytes_1.concat)(result_1);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nfunction pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    var tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return (0, bytes_1.hexlify)((0, bytes_1.concat)(tight));\n}\nexports.pack = pack;\nfunction keccak256(types, values) {\n    return (0, keccak256_1.keccak256)(pack(types, values));\n}\nexports.keccak256 = keccak256;\nfunction sha256(types, values) {\n    return (0, sha2_1.sha256)(pack(types, values));\n}\nexports.sha256 = sha256;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}
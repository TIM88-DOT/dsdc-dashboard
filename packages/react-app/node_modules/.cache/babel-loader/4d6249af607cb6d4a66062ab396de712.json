{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\nimport { useEthers } from \"@usedapp/core\";\nconst useUserDsdcs = () => {\n  _s();\n  const [ids, setIds] = useState([]);\n  const {\n    account\n  } = useEthers();\n  useEffect(() => {\n    const fetchIds = async () => {\n      try {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://data-seed-prebsc-1-s3.binance.org:8545\");\n        const contract = new ethers.Contract(addresses.dsdc, abis.dsdc, provider);\n        const ids = await contract.walletOfOwner(account);\n        setIds(ids);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchIds();\n  }, [account]);\n  return ids.map(e => e.toString());\n};\n_s(useUserDsdcs, \"LQwyQPep3jMoqMqh7Om7ybbT2sc=\", false, function () {\n  return [useEthers];\n});\nexport default useUserDsdcs;","map":{"version":3,"names":["useState","useEffect","ethers","addresses","abis","useEthers","useUserDsdcs","_s","ids","setIds","account","fetchIds","provider","providers","JsonRpcProvider","contract","Contract","dsdc","walletOfOwner","error","console","map","e","toString"],"sources":["D:/dsdc-dashboard/packages/react-app/src/hooks/dsdc/useUserDsdcs.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { useEthers } from \"@usedapp/core\";\r\n\r\nconst useUserDsdcs = () => {\r\n  const [ids, setIds] = useState([]);\r\n  const { account } = useEthers();\r\n  useEffect(() => {\r\n    const fetchIds = async () => {\r\n      try {\r\n        const provider = new ethers.providers.JsonRpcProvider(\r\n            \"https://data-seed-prebsc-1-s3.binance.org:8545\"\r\n        );\r\n        const contract = new ethers.Contract(addresses.dsdc, abis.dsdc, provider);\r\n        const ids = await contract.walletOfOwner(account);\r\n        setIds(ids);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchIds();\r\n  }, [account]);\r\n\r\n  return ids.map(e=> e.toString());\r\n};\r\n\r\nexport default useUserDsdcs;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,EAAEC,IAAI,QAAQ,2BAA2B;AAC3D,SAASC,SAAS,QAAQ,eAAe;AAEzC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM;IAAEU;EAAQ,CAAC,GAAGL,SAAS,EAAE;EAC/BJ,SAAS,CAAC,MAAM;IACd,MAAMU,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAS,CAACC,eAAe,CACjD,gDAAgD,CACnD;QACD,MAAMC,QAAQ,GAAG,IAAIb,MAAM,CAACc,QAAQ,CAACb,SAAS,CAACc,IAAI,EAAEb,IAAI,CAACa,IAAI,EAAEL,QAAQ,CAAC;QACzE,MAAMJ,GAAG,GAAG,MAAMO,QAAQ,CAACG,aAAa,CAACR,OAAO,CAAC;QACjDD,MAAM,CAACD,GAAG,CAAC;MACb,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDR,QAAQ,EAAE;EACZ,CAAC,EAAE,CAACD,OAAO,CAAC,CAAC;EAEb,OAAOF,GAAG,CAACa,GAAG,CAACC,CAAC,IAAGA,CAAC,CAACC,QAAQ,EAAE,CAAC;AAClC,CAAC;AAAChB,EAAA,CArBID,YAAY;EAAA,QAEID,SAAS;AAAA;AAqB/B,eAAeC,YAAY"},"metadata":{},"sourceType":"module"}
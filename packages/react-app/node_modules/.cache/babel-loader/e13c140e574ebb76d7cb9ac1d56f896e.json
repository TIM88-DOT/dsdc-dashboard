{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  BaseCurrency: () => BaseCurrency,\n  CurrencyAmount: () => CurrencyAmount,\n  FIVE: () => FIVE,\n  Fraction: () => Fraction,\n  InsufficientInputAmountError: () => InsufficientInputAmountError,\n  InsufficientReservesError: () => InsufficientReservesError,\n  JSBI: () => import_jsbi7.default,\n  MINIMUM_LIQUIDITY: () => MINIMUM_LIQUIDITY,\n  MaxUint256: () => MaxUint256,\n  NativeCurrency: () => NativeCurrency,\n  ONE: () => ONE,\n  Percent: () => Percent,\n  Price: () => Price,\n  Rounding: () => Rounding,\n  TEN: () => TEN,\n  THREE: () => THREE,\n  TWO: () => TWO,\n  Token: () => Token,\n  TradeType: () => TradeType,\n  VMType: () => VMType,\n  VM_TYPE_MAXIMA: () => VM_TYPE_MAXIMA,\n  ZERO: () => ZERO,\n  _100: () => _100,\n  _10000: () => _10000,\n  _9975: () => _9975,\n  computePriceImpact: () => computePriceImpact,\n  sortedInsert: () => sortedInsert,\n  sqrt: () => sqrt,\n  validateVMTypeInstance: () => validateVMTypeInstance\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_jsbi7 = __toESM(require(\"jsbi\"));\n\n// src/constants.ts\nvar import_jsbi = __toESM(require(\"jsbi\"));\nvar TradeType = /* @__PURE__ */(TradeType2 => {\n  TradeType2[TradeType2[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType2[TradeType2[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n  return TradeType2;\n})(TradeType || {});\nvar Rounding = /* @__PURE__ */(Rounding2 => {\n  Rounding2[Rounding2[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding2[Rounding2[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding2[Rounding2[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n  return Rounding2;\n})(Rounding || {});\nvar MINIMUM_LIQUIDITY = import_jsbi.default.BigInt(1e3);\nvar ZERO = import_jsbi.default.BigInt(0);\nvar ONE = import_jsbi.default.BigInt(1);\nvar TWO = import_jsbi.default.BigInt(2);\nvar THREE = import_jsbi.default.BigInt(3);\nvar FIVE = import_jsbi.default.BigInt(5);\nvar TEN = import_jsbi.default.BigInt(10);\nvar _100 = import_jsbi.default.BigInt(100);\nvar _9975 = import_jsbi.default.BigInt(9975);\nvar _10000 = import_jsbi.default.BigInt(1e4);\nvar MaxUint256 = import_jsbi.default.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nvar VMType = /* @__PURE__ */(VMType2 => {\n  VMType2[\"uint8\"] = \"uint8\";\n  VMType2[\"uint256\"] = \"uint256\";\n  return VMType2;\n})(VMType || {});\nvar VM_TYPE_MAXIMA = {\n  [\"uint8\" /* uint8 */]: import_jsbi.default.BigInt(\"0xff\"),\n  [\"uint256\" /* uint256 */]: import_jsbi.default.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n};\n\n// src/baseCurrency.ts\nvar import_tiny_invariant = __toESM(require(\"tiny-invariant\"));\nvar BaseCurrency = class {\n  constructor(chainId, decimals, symbol, name) {\n    (0, import_tiny_invariant.default)(Number.isSafeInteger(chainId), \"CHAIN_ID\");\n    (0, import_tiny_invariant.default)(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), \"DECIMALS\");\n    this.chainId = chainId;\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n};\n\n// src/fractions/fraction.ts\nvar import_jsbi2 = __toESM(require(\"jsbi\"));\nvar import_tiny_invariant2 = __toESM(require(\"tiny-invariant\"));\nvar import_decimal = __toESM(require(\"decimal.js-light\"));\nvar import_big = __toESM(require(\"big.js\"));\nvar import_toformat = __toESM(require(\"toformat\"));\nvar Decimal = (0, import_toformat.default)(import_decimal.default);\nvar Big = (0, import_toformat.default)(import_big.default);\nvar toSignificantRounding = {\n  [0 /* ROUND_DOWN */]: Decimal.ROUND_DOWN,\n  [1 /* ROUND_HALF_UP */]: Decimal.ROUND_HALF_UP,\n  [2 /* ROUND_UP */]: Decimal.ROUND_UP\n};\nvar toFixedRounding = {\n  [0 /* ROUND_DOWN */]: 0 /* RoundDown */,\n  [1 /* ROUND_HALF_UP */]: 1 /* RoundHalfUp */,\n  [2 /* ROUND_UP */]: 3 /* RoundUp */\n};\n\nvar Fraction = class {\n  constructor(numerator) {\n    let denominator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : import_jsbi2.default.BigInt(1);\n    this.numerator = import_jsbi2.default.BigInt(numerator);\n    this.denominator = import_jsbi2.default.BigInt(denominator);\n  }\n  static tryParseFraction(fractionish) {\n    if (fractionish instanceof import_jsbi2.default || typeof fractionish === \"number\" || typeof fractionish === \"string\") return new Fraction(fractionish);\n    if (\"numerator\" in fractionish && \"denominator\" in fractionish) return fractionish;\n    throw new Error(\"Could not parse fraction\");\n  }\n  get quotient() {\n    return import_jsbi2.default.divide(this.numerator, this.denominator);\n  }\n  get remainder() {\n    return new Fraction(import_jsbi2.default.remainder(this.numerator, this.denominator), this.denominator);\n  }\n  invert() {\n    return new Fraction(this.denominator, this.numerator);\n  }\n  add(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (import_jsbi2.default.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(import_jsbi2.default.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(import_jsbi2.default.add(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator)), import_jsbi2.default.multiply(this.denominator, otherParsed.denominator));\n  }\n  subtract(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (import_jsbi2.default.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(import_jsbi2.default.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(import_jsbi2.default.subtract(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator)), import_jsbi2.default.multiply(this.denominator, otherParsed.denominator));\n  }\n  lessThan(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return import_jsbi2.default.lessThan(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator));\n  }\n  equalTo(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return import_jsbi2.default.equal(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator));\n  }\n  greaterThan(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return import_jsbi2.default.greaterThan(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator));\n  }\n  multiply(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(import_jsbi2.default.multiply(this.numerator, otherParsed.numerator), import_jsbi2.default.multiply(this.denominator, otherParsed.denominator));\n  }\n  divide(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(this.denominator, otherParsed.numerator));\n  }\n  toSignificant(significantDigits) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      groupSeparator: \"\"\n    };\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    (0, import_tiny_invariant2.default)(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    (0, import_tiny_invariant2.default)(significantDigits > 0, `${significantDigits} is not positive.`);\n    Decimal.set({\n      precision: significantDigits + 1,\n      rounding: toSignificantRounding[rounding]\n    });\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n  toFixed(decimalPlaces) {\n    let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      groupSeparator: \"\"\n    };\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    (0, import_tiny_invariant2.default)(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    (0, import_tiny_invariant2.default)(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  get asFraction() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n};\n\n// src/fractions/percent.ts\nvar import_jsbi3 = __toESM(require(\"jsbi\"));\nvar ONE_HUNDRED = new Fraction(import_jsbi3.default.BigInt(100));\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\nvar Percent = class extends Fraction {\n  constructor() {\n    super(...arguments);\n    this.isPercent = true;\n  }\n  add(other) {\n    return toPercent(super.add(other));\n  }\n  subtract(other) {\n    return toPercent(super.subtract(other));\n  }\n  multiply(other) {\n    return toPercent(super.multiply(other));\n  }\n  divide(other) {\n    return toPercent(super.divide(other));\n  }\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 5;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  }\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n};\n\n// src/fractions/currencyAmount.ts\nvar import_tiny_invariant3 = __toESM(require(\"tiny-invariant\"));\nvar import_jsbi4 = __toESM(require(\"jsbi\"));\nvar import_big2 = __toESM(require(\"big.js\"));\nvar import_toformat2 = __toESM(require(\"toformat\"));\nvar Big2 = (0, import_toformat2.default)(import_big2.default);\nvar CurrencyAmount = class extends Fraction {\n  constructor(currency, numerator, denominator) {\n    super(numerator, denominator);\n    (0, import_tiny_invariant3.default)(import_jsbi4.default.lessThanOrEqual(this.quotient, MaxUint256), \"AMOUNT\");\n    this.currency = currency;\n    this.decimalScale = import_jsbi4.default.exponentiate(import_jsbi4.default.BigInt(10), import_jsbi4.default.BigInt(currency.decimals));\n  }\n  static fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  static fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  }\n  add(other) {\n    (0, import_tiny_invariant3.default)(this.currency.equals(other.currency), \"CURRENCY\");\n    const added = super.add(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  }\n  subtract(other) {\n    (0, import_tiny_invariant3.default)(this.currency.equals(other.currency), \"CURRENCY\");\n    const subtracted = super.subtract(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  }\n  multiply(other) {\n    const multiplied = super.multiply(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  }\n  divide(other) {\n    const divided = super.divide(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  }\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);\n  }\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.currency.decimals;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    (0, import_tiny_invariant3.default)(decimalPlaces <= this.currency.decimals, \"DECIMALS\");\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  }\n  toExact() {\n    let format = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      groupSeparator: \"\"\n    };\n    Big2.DP = this.currency.decimals;\n    return new Big2(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  }\n  get wrapped() {\n    if (this.currency.isToken) return this;\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n  }\n};\n\n// src/fractions/price.ts\nvar import_jsbi5 = __toESM(require(\"jsbi\"));\nvar import_tiny_invariant4 = __toESM(require(\"tiny-invariant\"));\nvar Price = class extends Fraction {\n  constructor() {\n    let baseCurrency;\n    let quoteCurrency;\n    let denominator;\n    let numerator;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 4) {\n      ;\n      [baseCurrency, quoteCurrency, denominator, numerator] = args;\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount);\n      [baseCurrency, quoteCurrency, denominator, numerator] = [args[0].baseAmount.currency, args[0].quoteAmount.currency, result.denominator, result.numerator];\n    }\n    super(numerator, denominator);\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(import_jsbi5.default.exponentiate(import_jsbi5.default.BigInt(10), import_jsbi5.default.BigInt(baseCurrency.decimals)), import_jsbi5.default.exponentiate(import_jsbi5.default.BigInt(10), import_jsbi5.default.BigInt(quoteCurrency.decimals)));\n  }\n  invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  multiply(other) {\n    (0, import_tiny_invariant4.default)(this.quoteCurrency.equals(other.baseCurrency), \"TOKEN\");\n    const fraction = super.multiply(other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  quote(currencyAmount) {\n    (0, import_tiny_invariant4.default)(currencyAmount.currency.equals(this.baseCurrency), \"TOKEN\");\n    const result = super.multiply(currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  get adjustedForDecimals() {\n    return super.multiply(this.scalar);\n  }\n  toSignificant() {\n    let significantDigits = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  }\n  toFixed() {\n    let decimalPlaces = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 4;\n    let format = arguments.length > 1 ? arguments[1] : undefined;\n    let rounding = arguments.length > 2 ? arguments[2] : undefined;\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  }\n};\n\n// src/nativeCurrency.ts\nvar NativeCurrency = class extends BaseCurrency {\n  constructor() {\n    super(...arguments);\n    this.isNative = true;\n    this.isToken = false;\n  }\n};\n\n// src/token.ts\nvar import_tiny_invariant5 = __toESM(require(\"tiny-invariant\"));\nvar Token = class extends BaseCurrency {\n  constructor(chainId, address, decimals, symbol, name, projectLink) {\n    super(chainId, decimals, symbol, name);\n    this.isNative = false;\n    this.isToken = true;\n    this.address = address;\n    this.projectLink = projectLink;\n  }\n  equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address;\n  }\n  sortsBefore(other) {\n    (0, import_tiny_invariant5.default)(this.chainId === other.chainId, \"CHAIN_IDS\");\n    (0, import_tiny_invariant5.default)(this.address !== other.address, \"ADDRESSES\");\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  get wrapped() {\n    return this;\n  }\n  get serialize() {\n    return {\n      address: this.address,\n      chainId: this.chainId,\n      decimals: this.decimals,\n      symbol: this.symbol,\n      name: this.name,\n      projectLink: this.projectLink\n    };\n  }\n};\n\n// src/errors.ts\nvar CAN_SET_PROTOTYPE = (\"setPrototypeOf\" in Object);\nvar InsufficientReservesError = class extends Error {\n  constructor() {\n    super();\n    this.isInsufficientReservesError = true;\n    this.name = this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\n  }\n};\nvar InsufficientInputAmountError = class extends Error {\n  constructor() {\n    super();\n    this.isInsufficientInputAmountError = true;\n    this.name = this.constructor.name;\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype);\n  }\n};\n\n// src/utils.ts\nvar import_jsbi6 = __toESM(require(\"jsbi\"));\nvar import_tiny_invariant6 = __toESM(require(\"tiny-invariant\"));\nfunction validateVMTypeInstance(value, vmType) {\n  (0, import_tiny_invariant6.default)(import_jsbi6.default.greaterThanOrEqual(value, ZERO), `${value} is not a ${vmType}.`);\n  (0, import_tiny_invariant6.default)(import_jsbi6.default.lessThanOrEqual(value, VM_TYPE_MAXIMA[vmType]), `${value} is not a ${vmType}.`);\n}\nfunction sqrt(y) {\n  validateVMTypeInstance(y, \"uint256\" /* uint256 */);\n  let z = ZERO;\n  let x;\n  if (import_jsbi6.default.greaterThan(y, THREE)) {\n    z = y;\n    x = import_jsbi6.default.add(import_jsbi6.default.divide(y, TWO), ONE);\n    while (import_jsbi6.default.lessThan(x, z)) {\n      z = x;\n      x = import_jsbi6.default.divide(import_jsbi6.default.add(import_jsbi6.default.divide(y, x), x), TWO);\n    }\n  } else if (import_jsbi6.default.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n  return z;\n}\nfunction sortedInsert(items, add, maxSize, comparator) {\n  (0, import_tiny_invariant6.default)(maxSize > 0, \"MAX_SIZE_ZERO\");\n  (0, import_tiny_invariant6.default)(items.length <= maxSize, \"ITEMS_SIZE\");\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    const isFull = items.length === maxSize;\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n    let lo = 0,\n      hi = items.length;\n    while (lo < hi) {\n      const mid = lo + hi >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  const quotedOutputAmount = midPrice.quote(inputAmount);\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  BaseCurrency,\n  CurrencyAmount,\n  FIVE,\n  Fraction,\n  InsufficientInputAmountError,\n  InsufficientReservesError,\n  JSBI,\n  MINIMUM_LIQUIDITY,\n  MaxUint256,\n  NativeCurrency,\n  ONE,\n  Percent,\n  Price,\n  Rounding,\n  TEN,\n  THREE,\n  TWO,\n  Token,\n  TradeType,\n  VMType,\n  VM_TYPE_MAXIMA,\n  ZERO,\n  _100,\n  _10000,\n  _9975,\n  computePriceImpact,\n  sortedInsert,\n  sqrt,\n  validateVMTypeInstance\n});","map":{"version":3,"names":["__create","Object","create","__defProp","defineProperty","__getOwnPropDesc","getOwnPropertyDescriptor","__getOwnPropNames","getOwnPropertyNames","__getProtoOf","getPrototypeOf","__hasOwnProp","prototype","hasOwnProperty","__export","target","all","name","get","enumerable","__copyProps","to","from","except","desc","key","call","__toESM","mod","isNodeMode","__esModule","value","__toCommonJS","src_exports","BaseCurrency","CurrencyAmount","FIVE","Fraction","InsufficientInputAmountError","InsufficientReservesError","JSBI","import_jsbi7","default","MINIMUM_LIQUIDITY","MaxUint256","NativeCurrency","ONE","Percent","Price","Rounding","TEN","THREE","TWO","Token","TradeType","VMType","VM_TYPE_MAXIMA","ZERO","_100","_10000","_9975","computePriceImpact","sortedInsert","sqrt","validateVMTypeInstance","module","exports","require","import_jsbi","TradeType2","Rounding2","BigInt","VMType2","import_tiny_invariant","constructor","chainId","decimals","symbol","Number","isSafeInteger","isInteger","import_jsbi2","import_tiny_invariant2","import_decimal","import_big","import_toformat","Decimal","Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","numerator","denominator","arguments","length","undefined","tryParseFraction","fractionish","Error","quotient","divide","remainder","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","toSignificant","significantDigits","format","groupSeparator","rounding","set","precision","toString","div","toSignificantDigits","toFormat","decimalPlaces","toFixed","DP","RM","asFraction","import_jsbi3","ONE_HUNDRED","toPercent","fraction","isPercent","import_tiny_invariant3","import_jsbi4","import_big2","import_toformat2","Big2","currency","lessThanOrEqual","decimalScale","exponentiate","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","wrapped","isToken","import_jsbi5","import_tiny_invariant4","baseCurrency","quoteCurrency","_len","args","Array","_key","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","isNative","import_tiny_invariant5","address","projectLink","sortsBefore","toLowerCase","serialize","CAN_SET_PROTOTYPE","isInsufficientReservesError","setPrototypeOf","new","isInsufficientInputAmountError","import_jsbi6","import_tiny_invariant6","vmType","greaterThanOrEqual","y","z","x","notEqual","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact"],"sources":["D:/dsdc-dashboard/node_modules/@pancakeswap/swap-sdk-core/dist/index.js"],"sourcesContent":["\"use strict\";\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target, mod));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  BaseCurrency: () => BaseCurrency,\n  CurrencyAmount: () => CurrencyAmount,\n  FIVE: () => FIVE,\n  Fraction: () => Fraction,\n  InsufficientInputAmountError: () => InsufficientInputAmountError,\n  InsufficientReservesError: () => InsufficientReservesError,\n  JSBI: () => import_jsbi7.default,\n  MINIMUM_LIQUIDITY: () => MINIMUM_LIQUIDITY,\n  MaxUint256: () => MaxUint256,\n  NativeCurrency: () => NativeCurrency,\n  ONE: () => ONE,\n  Percent: () => Percent,\n  Price: () => Price,\n  Rounding: () => Rounding,\n  TEN: () => TEN,\n  THREE: () => THREE,\n  TWO: () => TWO,\n  Token: () => Token,\n  TradeType: () => TradeType,\n  VMType: () => VMType,\n  VM_TYPE_MAXIMA: () => VM_TYPE_MAXIMA,\n  ZERO: () => ZERO,\n  _100: () => _100,\n  _10000: () => _10000,\n  _9975: () => _9975,\n  computePriceImpact: () => computePriceImpact,\n  sortedInsert: () => sortedInsert,\n  sqrt: () => sqrt,\n  validateVMTypeInstance: () => validateVMTypeInstance\n});\nmodule.exports = __toCommonJS(src_exports);\nvar import_jsbi7 = __toESM(require(\"jsbi\"));\n\n// src/constants.ts\nvar import_jsbi = __toESM(require(\"jsbi\"));\nvar TradeType = /* @__PURE__ */ ((TradeType2) => {\n  TradeType2[TradeType2[\"EXACT_INPUT\"] = 0] = \"EXACT_INPUT\";\n  TradeType2[TradeType2[\"EXACT_OUTPUT\"] = 1] = \"EXACT_OUTPUT\";\n  return TradeType2;\n})(TradeType || {});\nvar Rounding = /* @__PURE__ */ ((Rounding2) => {\n  Rounding2[Rounding2[\"ROUND_DOWN\"] = 0] = \"ROUND_DOWN\";\n  Rounding2[Rounding2[\"ROUND_HALF_UP\"] = 1] = \"ROUND_HALF_UP\";\n  Rounding2[Rounding2[\"ROUND_UP\"] = 2] = \"ROUND_UP\";\n  return Rounding2;\n})(Rounding || {});\nvar MINIMUM_LIQUIDITY = import_jsbi.default.BigInt(1e3);\nvar ZERO = import_jsbi.default.BigInt(0);\nvar ONE = import_jsbi.default.BigInt(1);\nvar TWO = import_jsbi.default.BigInt(2);\nvar THREE = import_jsbi.default.BigInt(3);\nvar FIVE = import_jsbi.default.BigInt(5);\nvar TEN = import_jsbi.default.BigInt(10);\nvar _100 = import_jsbi.default.BigInt(100);\nvar _9975 = import_jsbi.default.BigInt(9975);\nvar _10000 = import_jsbi.default.BigInt(1e4);\nvar MaxUint256 = import_jsbi.default.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nvar VMType = /* @__PURE__ */ ((VMType2) => {\n  VMType2[\"uint8\"] = \"uint8\";\n  VMType2[\"uint256\"] = \"uint256\";\n  return VMType2;\n})(VMType || {});\nvar VM_TYPE_MAXIMA = {\n  [\"uint8\" /* uint8 */]: import_jsbi.default.BigInt(\"0xff\"),\n  [\"uint256\" /* uint256 */]: import_jsbi.default.BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\")\n};\n\n// src/baseCurrency.ts\nvar import_tiny_invariant = __toESM(require(\"tiny-invariant\"));\nvar BaseCurrency = class {\n  constructor(chainId, decimals, symbol, name) {\n    (0, import_tiny_invariant.default)(Number.isSafeInteger(chainId), \"CHAIN_ID\");\n    (0, import_tiny_invariant.default)(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), \"DECIMALS\");\n    this.chainId = chainId;\n    this.decimals = decimals;\n    this.symbol = symbol;\n    this.name = name;\n  }\n};\n\n// src/fractions/fraction.ts\nvar import_jsbi2 = __toESM(require(\"jsbi\"));\nvar import_tiny_invariant2 = __toESM(require(\"tiny-invariant\"));\nvar import_decimal = __toESM(require(\"decimal.js-light\"));\nvar import_big = __toESM(require(\"big.js\"));\nvar import_toformat = __toESM(require(\"toformat\"));\nvar Decimal = (0, import_toformat.default)(import_decimal.default);\nvar Big = (0, import_toformat.default)(import_big.default);\nvar toSignificantRounding = {\n  [0 /* ROUND_DOWN */]: Decimal.ROUND_DOWN,\n  [1 /* ROUND_HALF_UP */]: Decimal.ROUND_HALF_UP,\n  [2 /* ROUND_UP */]: Decimal.ROUND_UP\n};\nvar toFixedRounding = {\n  [0 /* ROUND_DOWN */]: 0 /* RoundDown */,\n  [1 /* ROUND_HALF_UP */]: 1 /* RoundHalfUp */,\n  [2 /* ROUND_UP */]: 3 /* RoundUp */\n};\nvar Fraction = class {\n  constructor(numerator, denominator = import_jsbi2.default.BigInt(1)) {\n    this.numerator = import_jsbi2.default.BigInt(numerator);\n    this.denominator = import_jsbi2.default.BigInt(denominator);\n  }\n  static tryParseFraction(fractionish) {\n    if (fractionish instanceof import_jsbi2.default || typeof fractionish === \"number\" || typeof fractionish === \"string\")\n      return new Fraction(fractionish);\n    if (\"numerator\" in fractionish && \"denominator\" in fractionish)\n      return fractionish;\n    throw new Error(\"Could not parse fraction\");\n  }\n  get quotient() {\n    return import_jsbi2.default.divide(this.numerator, this.denominator);\n  }\n  get remainder() {\n    return new Fraction(import_jsbi2.default.remainder(this.numerator, this.denominator), this.denominator);\n  }\n  invert() {\n    return new Fraction(this.denominator, this.numerator);\n  }\n  add(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (import_jsbi2.default.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(import_jsbi2.default.add(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(import_jsbi2.default.add(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator)), import_jsbi2.default.multiply(this.denominator, otherParsed.denominator));\n  }\n  subtract(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    if (import_jsbi2.default.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(import_jsbi2.default.subtract(this.numerator, otherParsed.numerator), this.denominator);\n    }\n    return new Fraction(import_jsbi2.default.subtract(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator)), import_jsbi2.default.multiply(this.denominator, otherParsed.denominator));\n  }\n  lessThan(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return import_jsbi2.default.lessThan(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator));\n  }\n  equalTo(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return import_jsbi2.default.equal(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator));\n  }\n  greaterThan(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return import_jsbi2.default.greaterThan(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(otherParsed.numerator, this.denominator));\n  }\n  multiply(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(import_jsbi2.default.multiply(this.numerator, otherParsed.numerator), import_jsbi2.default.multiply(this.denominator, otherParsed.denominator));\n  }\n  divide(other) {\n    const otherParsed = Fraction.tryParseFraction(other);\n    return new Fraction(import_jsbi2.default.multiply(this.numerator, otherParsed.denominator), import_jsbi2.default.multiply(this.denominator, otherParsed.numerator));\n  }\n  toSignificant(significantDigits, format = { groupSeparator: \"\" }, rounding = 1 /* ROUND_HALF_UP */) {\n    (0, import_tiny_invariant2.default)(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`);\n    (0, import_tiny_invariant2.default)(significantDigits > 0, `${significantDigits} is not positive.`);\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] });\n    const quotient = new Decimal(this.numerator.toString()).div(this.denominator.toString()).toSignificantDigits(significantDigits);\n    return quotient.toFormat(quotient.decimalPlaces(), format);\n  }\n  toFixed(decimalPlaces, format = { groupSeparator: \"\" }, rounding = 1 /* ROUND_HALF_UP */) {\n    (0, import_tiny_invariant2.default)(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`);\n    (0, import_tiny_invariant2.default)(decimalPlaces >= 0, `${decimalPlaces} is negative.`);\n    Big.DP = decimalPlaces;\n    Big.RM = toFixedRounding[rounding];\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format);\n  }\n  get asFraction() {\n    return new Fraction(this.numerator, this.denominator);\n  }\n};\n\n// src/fractions/percent.ts\nvar import_jsbi3 = __toESM(require(\"jsbi\"));\nvar ONE_HUNDRED = new Fraction(import_jsbi3.default.BigInt(100));\nfunction toPercent(fraction) {\n  return new Percent(fraction.numerator, fraction.denominator);\n}\nvar Percent = class extends Fraction {\n  constructor() {\n    super(...arguments);\n    this.isPercent = true;\n  }\n  add(other) {\n    return toPercent(super.add(other));\n  }\n  subtract(other) {\n    return toPercent(super.subtract(other));\n  }\n  multiply(other) {\n    return toPercent(super.multiply(other));\n  }\n  divide(other) {\n    return toPercent(super.divide(other));\n  }\n  toSignificant(significantDigits = 5, format, rounding) {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding);\n  }\n  toFixed(decimalPlaces = 2, format, rounding) {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding);\n  }\n};\n\n// src/fractions/currencyAmount.ts\nvar import_tiny_invariant3 = __toESM(require(\"tiny-invariant\"));\nvar import_jsbi4 = __toESM(require(\"jsbi\"));\nvar import_big2 = __toESM(require(\"big.js\"));\nvar import_toformat2 = __toESM(require(\"toformat\"));\nvar Big2 = (0, import_toformat2.default)(import_big2.default);\nvar CurrencyAmount = class extends Fraction {\n  constructor(currency, numerator, denominator) {\n    super(numerator, denominator);\n    (0, import_tiny_invariant3.default)(import_jsbi4.default.lessThanOrEqual(this.quotient, MaxUint256), \"AMOUNT\");\n    this.currency = currency;\n    this.decimalScale = import_jsbi4.default.exponentiate(import_jsbi4.default.BigInt(10), import_jsbi4.default.BigInt(currency.decimals));\n  }\n  static fromRawAmount(currency, rawAmount) {\n    return new CurrencyAmount(currency, rawAmount);\n  }\n  static fromFractionalAmount(currency, numerator, denominator) {\n    return new CurrencyAmount(currency, numerator, denominator);\n  }\n  add(other) {\n    (0, import_tiny_invariant3.default)(this.currency.equals(other.currency), \"CURRENCY\");\n    const added = super.add(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator);\n  }\n  subtract(other) {\n    (0, import_tiny_invariant3.default)(this.currency.equals(other.currency), \"CURRENCY\");\n    const subtracted = super.subtract(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator);\n  }\n  multiply(other) {\n    const multiplied = super.multiply(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator);\n  }\n  divide(other) {\n    const divided = super.divide(other);\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator);\n  }\n  toSignificant(significantDigits = 6, format, rounding = 0 /* ROUND_DOWN */) {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding);\n  }\n  toFixed(decimalPlaces = this.currency.decimals, format, rounding = 0 /* ROUND_DOWN */) {\n    (0, import_tiny_invariant3.default)(decimalPlaces <= this.currency.decimals, \"DECIMALS\");\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding);\n  }\n  toExact(format = { groupSeparator: \"\" }) {\n    Big2.DP = this.currency.decimals;\n    return new Big2(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format);\n  }\n  get wrapped() {\n    if (this.currency.isToken)\n      return this;\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator);\n  }\n};\n\n// src/fractions/price.ts\nvar import_jsbi5 = __toESM(require(\"jsbi\"));\nvar import_tiny_invariant4 = __toESM(require(\"tiny-invariant\"));\nvar Price = class extends Fraction {\n  constructor(...args) {\n    let baseCurrency;\n    let quoteCurrency;\n    let denominator;\n    let numerator;\n    if (args.length === 4) {\n      ;\n      [baseCurrency, quoteCurrency, denominator, numerator] = args;\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount);\n      [baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ];\n    }\n    super(numerator, denominator);\n    this.baseCurrency = baseCurrency;\n    this.quoteCurrency = quoteCurrency;\n    this.scalar = new Fraction(import_jsbi5.default.exponentiate(import_jsbi5.default.BigInt(10), import_jsbi5.default.BigInt(baseCurrency.decimals)), import_jsbi5.default.exponentiate(import_jsbi5.default.BigInt(10), import_jsbi5.default.BigInt(quoteCurrency.decimals)));\n  }\n  invert() {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator);\n  }\n  multiply(other) {\n    (0, import_tiny_invariant4.default)(this.quoteCurrency.equals(other.baseCurrency), \"TOKEN\");\n    const fraction = super.multiply(other);\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator);\n  }\n  quote(currencyAmount) {\n    (0, import_tiny_invariant4.default)(currencyAmount.currency.equals(this.baseCurrency), \"TOKEN\");\n    const result = super.multiply(currencyAmount);\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator);\n  }\n  get adjustedForDecimals() {\n    return super.multiply(this.scalar);\n  }\n  toSignificant(significantDigits = 6, format, rounding) {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding);\n  }\n  toFixed(decimalPlaces = 4, format, rounding) {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding);\n  }\n};\n\n// src/nativeCurrency.ts\nvar NativeCurrency = class extends BaseCurrency {\n  constructor() {\n    super(...arguments);\n    this.isNative = true;\n    this.isToken = false;\n  }\n};\n\n// src/token.ts\nvar import_tiny_invariant5 = __toESM(require(\"tiny-invariant\"));\nvar Token = class extends BaseCurrency {\n  constructor(chainId, address, decimals, symbol, name, projectLink) {\n    super(chainId, decimals, symbol, name);\n    this.isNative = false;\n    this.isToken = true;\n    this.address = address;\n    this.projectLink = projectLink;\n  }\n  equals(other) {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address;\n  }\n  sortsBefore(other) {\n    (0, import_tiny_invariant5.default)(this.chainId === other.chainId, \"CHAIN_IDS\");\n    (0, import_tiny_invariant5.default)(this.address !== other.address, \"ADDRESSES\");\n    return this.address.toLowerCase() < other.address.toLowerCase();\n  }\n  get wrapped() {\n    return this;\n  }\n  get serialize() {\n    return {\n      address: this.address,\n      chainId: this.chainId,\n      decimals: this.decimals,\n      symbol: this.symbol,\n      name: this.name,\n      projectLink: this.projectLink\n    };\n  }\n};\n\n// src/errors.ts\nvar CAN_SET_PROTOTYPE = \"setPrototypeOf\" in Object;\nvar InsufficientReservesError = class extends Error {\n  constructor() {\n    super();\n    this.isInsufficientReservesError = true;\n    this.name = this.constructor.name;\n    if (CAN_SET_PROTOTYPE)\n      Object.setPrototypeOf(this, new.target.prototype);\n  }\n};\nvar InsufficientInputAmountError = class extends Error {\n  constructor() {\n    super();\n    this.isInsufficientInputAmountError = true;\n    this.name = this.constructor.name;\n    if (CAN_SET_PROTOTYPE)\n      Object.setPrototypeOf(this, new.target.prototype);\n  }\n};\n\n// src/utils.ts\nvar import_jsbi6 = __toESM(require(\"jsbi\"));\nvar import_tiny_invariant6 = __toESM(require(\"tiny-invariant\"));\nfunction validateVMTypeInstance(value, vmType) {\n  (0, import_tiny_invariant6.default)(import_jsbi6.default.greaterThanOrEqual(value, ZERO), `${value} is not a ${vmType}.`);\n  (0, import_tiny_invariant6.default)(import_jsbi6.default.lessThanOrEqual(value, VM_TYPE_MAXIMA[vmType]), `${value} is not a ${vmType}.`);\n}\nfunction sqrt(y) {\n  validateVMTypeInstance(y, \"uint256\" /* uint256 */);\n  let z = ZERO;\n  let x;\n  if (import_jsbi6.default.greaterThan(y, THREE)) {\n    z = y;\n    x = import_jsbi6.default.add(import_jsbi6.default.divide(y, TWO), ONE);\n    while (import_jsbi6.default.lessThan(x, z)) {\n      z = x;\n      x = import_jsbi6.default.divide(import_jsbi6.default.add(import_jsbi6.default.divide(y, x), x), TWO);\n    }\n  } else if (import_jsbi6.default.notEqual(y, ZERO)) {\n    z = ONE;\n  }\n  return z;\n}\nfunction sortedInsert(items, add, maxSize, comparator) {\n  (0, import_tiny_invariant6.default)(maxSize > 0, \"MAX_SIZE_ZERO\");\n  (0, import_tiny_invariant6.default)(items.length <= maxSize, \"ITEMS_SIZE\");\n  if (items.length === 0) {\n    items.push(add);\n    return null;\n  } else {\n    const isFull = items.length === maxSize;\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add;\n    }\n    let lo = 0, hi = items.length;\n    while (lo < hi) {\n      const mid = lo + hi >>> 1;\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1;\n      } else {\n        hi = mid;\n      }\n    }\n    items.splice(lo, 0, add);\n    return isFull ? items.pop() : null;\n  }\n}\nfunction computePriceImpact(midPrice, inputAmount, outputAmount) {\n  const quotedOutputAmount = midPrice.quote(inputAmount);\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount);\n  return new Percent(priceImpact.numerator, priceImpact.denominator);\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  BaseCurrency,\n  CurrencyAmount,\n  FIVE,\n  Fraction,\n  InsufficientInputAmountError,\n  InsufficientReservesError,\n  JSBI,\n  MINIMUM_LIQUIDITY,\n  MaxUint256,\n  NativeCurrency,\n  ONE,\n  Percent,\n  Price,\n  Rounding,\n  TEN,\n  THREE,\n  TWO,\n  Token,\n  TradeType,\n  VMType,\n  VM_TYPE_MAXIMA,\n  ZERO,\n  _100,\n  _10000,\n  _9975,\n  computePriceImpact,\n  sortedInsert,\n  sqrt,\n  validateVMTypeInstance\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { ethers } from \"ethers\";\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\nimport { useEthers } from \"@usedapp/core\";\nconst useGetTotalRewards = plan => {\n  _s();\n  const [totalRewards, setTotalRewards] = useState();\n  const {\n    account\n  } = useEthers();\n  useEffect(() => {\n    const getTotalRewards = async () => {\n      try {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://data-seed-prebsc-1-s3.binance.org:8545\");\n        const contract = new ethers.Contract(addresses.staking, abis.staking, provider);\n        const totalRewardsValue = await contract.getEarnedRewards(plan, account);\n        setTotalRewards(totalRewardsValue);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    getTotalRewards();\n  }, [account, plan, totalRewards]);\n  return totalRewards;\n};\n_s(useGetTotalRewards, \"xRxWHVPYkMuyMcqjAtrfiCYWoP0=\", false, function () {\n  return [useEthers];\n});\nexport default useGetTotalRewards;","map":{"version":3,"names":["useState","useEffect","ethers","addresses","abis","useEthers","useGetTotalRewards","plan","_s","totalRewards","setTotalRewards","account","getTotalRewards","provider","providers","JsonRpcProvider","contract","Contract","staking","totalRewardsValue","getEarnedRewards","error","console"],"sources":["D:/dsdc-dashboard/packages/react-app/src/hooks/useGetTotalRewards.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { ethers } from \"ethers\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { useEthers } from \"@usedapp/core\";\r\n\r\nconst useGetTotalRewards = (plan) => {\r\n  const [totalRewards, setTotalRewards] = useState();\r\n  const { account } = useEthers();\r\n  useEffect(() => {\r\n    const getTotalRewards = async () => {\r\n      try {\r\n        const provider = new ethers.providers.JsonRpcProvider(\r\n          \"https://data-seed-prebsc-1-s3.binance.org:8545\"\r\n        );\r\n        const contract = new ethers.Contract(\r\n          addresses.staking,\r\n          abis.staking,\r\n          provider\r\n        );\r\n        const totalRewardsValue = await contract.getEarnedRewards(\r\n          plan,\r\n          account\r\n        );\r\n        setTotalRewards(totalRewardsValue);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    getTotalRewards();\r\n  }, [account, plan, totalRewards]);\r\n\r\n  return totalRewards;\r\n};\r\n\r\nexport default useGetTotalRewards;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,EAAEC,IAAI,QAAQ,2BAA2B;AAC3D,SAASC,SAAS,QAAQ,eAAe;AAEzC,MAAMC,kBAAkB,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,EAAE;EAClD,MAAM;IAAEW;EAAQ,CAAC,GAAGN,SAAS,EAAE;EAC/BJ,SAAS,CAAC,MAAM;IACd,MAAMW,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,eAAe,CACnD,gDAAgD,CACjD;QACD,MAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,QAAQ,CAClCd,SAAS,CAACe,OAAO,EACjBd,IAAI,CAACc,OAAO,EACZL,QAAQ,CACT;QACD,MAAMM,iBAAiB,GAAG,MAAMH,QAAQ,CAACI,gBAAgB,CACvDb,IAAI,EACJI,OAAO,CACR;QACDD,eAAe,CAACS,iBAAiB,CAAC;MACpC,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDT,eAAe,EAAE;EACnB,CAAC,EAAE,CAACD,OAAO,EAAEJ,IAAI,EAAEE,YAAY,CAAC,CAAC;EAEjC,OAAOA,YAAY;AACrB,CAAC;AAACD,EAAA,CA5BIF,kBAAkB;EAAA,QAEFD,SAAS;AAAA;AA4B/B,eAAeC,kBAAkB"},"metadata":{},"sourceType":"module"}
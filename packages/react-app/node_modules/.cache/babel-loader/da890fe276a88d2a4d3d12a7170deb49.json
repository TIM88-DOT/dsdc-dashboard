{"ast":null,"code":"var _jsxFileName = \"D:\\\\dsdc-dashboard\\\\packages\\\\react-app\\\\src\\\\components\\\\Swap.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { ethers } from 'ethers';\nimport PancakeSwap from '@pancakeswap/sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SwapComponent() {\n  _s();\n  const [inputToken, setInputToken] = useState('');\n  const [outputToken, setOutputToken] = useState('');\n  const [inputAmount, setInputAmount] = useState('');\n  const [outputAmount, setOutputAmount] = useState('');\n  const handleSwap = async () => {\n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      const tradeType = PancakeSwap.tradeType.EXACT_INPUT;\n      const inputTokenInfo = await PancakeSwap.fetchTokenData(inputToken);\n      const outputTokenInfo = await PancakeSwap.fetchTokenData(outputToken);\n      const inputAmountInWei = ethers.utils.parseUnits(inputAmount, inputTokenInfo.decimals);\n      const pancakeSwap = PancakeSwap.create(inputTokenInfo, outputTokenInfo);\n      const trade = await pancakeSwap.trade(inputAmountInWei, tradeType);\n      const tx = await signer.sendTransaction({\n        to: pancakeSwap.routerAddress,\n        value: ethers.utils.parseEther('0'),\n        data: trade.encodedData\n      });\n      await tx.wait();\n      setOutputAmount(ethers.utils.formatUnits(trade.outputAmount, outputTokenInfo.decimals));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputToken,\n      onChange: e => setInputToken(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: outputToken,\n      onChange: e => setOutputToken(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: inputAmount,\n      onChange: e => setInputAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSwap,\n      children: \"Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: outputAmount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(SwapComponent, \"g6/XqPrs4QP7ZUgUBjZDohr3EAg=\");\n_c = SwapComponent;\nexport default SwapComponent;\nvar _c;\n$RefreshReg$(_c, \"SwapComponent\");","map":{"version":3,"names":["useState","ethers","PancakeSwap","jsxDEV","_jsxDEV","SwapComponent","_s","inputToken","setInputToken","outputToken","setOutputToken","inputAmount","setInputAmount","outputAmount","setOutputAmount","handleSwap","provider","providers","Web3Provider","window","ethereum","signer","getSigner","tradeType","EXACT_INPUT","inputTokenInfo","fetchTokenData","outputTokenInfo","inputAmountInWei","utils","parseUnits","decimals","pancakeSwap","create","trade","tx","sendTransaction","to","routerAddress","value","parseEther","data","encodedData","wait","formatUnits","error","console","log","children","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["D:/dsdc-dashboard/packages/react-app/src/components/Swap.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport PancakeSwap from '@pancakeswap/sdk';\r\n\r\nfunction SwapComponent() {\r\n  const [inputToken, setInputToken] = useState('');\r\n  const [outputToken, setOutputToken] = useState('');\r\n  const [inputAmount, setInputAmount] = useState('');\r\n  const [outputAmount, setOutputAmount] = useState('');\r\n\r\n  const handleSwap = async () => {\r\n    try {\r\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\r\n      const signer = provider.getSigner();\r\n      const tradeType = PancakeSwap.tradeType.EXACT_INPUT;\r\n\r\n      const inputTokenInfo = await PancakeSwap.fetchTokenData(inputToken);\r\n      const outputTokenInfo = await PancakeSwap.fetchTokenData(outputToken);\r\n      const inputAmountInWei = ethers.utils.parseUnits(inputAmount, inputTokenInfo.decimals);\r\n\r\n      const pancakeSwap = PancakeSwap.create(inputTokenInfo, outputTokenInfo);\r\n      const trade = await pancakeSwap.trade(inputAmountInWei, tradeType);\r\n\r\n      const tx = await signer.sendTransaction({\r\n        to: pancakeSwap.routerAddress,\r\n        value: ethers.utils.parseEther('0'),\r\n        data: trade.encodedData,\r\n      });\r\n\r\n      await tx.wait();\r\n      setOutputAmount(ethers.utils.formatUnits(trade.outputAmount, outputTokenInfo.decimals));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input value={inputToken} onChange={(e) => setInputToken(e.target.value)} />\r\n      <input value={outputToken} onChange={(e) => setOutputToken(e.target.value)} />\r\n      <input value={inputAmount} onChange={(e) => setInputAmount(e.target.value)} />\r\n      <button onClick={handleSwap}>Swap</button>\r\n      <div>{outputAmount}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SwapComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
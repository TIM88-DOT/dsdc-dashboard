{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\nimport { useEthers } from \"@usedapp/core\";\nconst useGetStakedNFTs = plan => {\n  _s();\n  const [ids, setIds] = useState([]);\n  const {\n    account\n  } = useEthers();\n  useEffect(() => {\n    const fetchIds = async () => {\n      try {\n        const provider = new ethers.providers.JsonRpcProvider(\"https://data-seed-prebsc-1-s3.binance.org:8545\");\n        const contract = new ethers.Contract(addresses.staking, abis.staking, provider);\n        const ids = await contract.getStakedTokens(plan, account);\n        setIds(ids);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    fetchIds();\n  }, [account, plan]);\n  return ids.map(e => e.toString());\n};\n_s(useGetStakedNFTs, \"LQwyQPep3jMoqMqh7Om7ybbT2sc=\", false, function () {\n  return [useEthers];\n});\nexport default useGetStakedNFTs;","map":{"version":3,"names":["useState","useEffect","ethers","addresses","abis","useEthers","useGetStakedNFTs","plan","_s","ids","setIds","account","fetchIds","provider","providers","JsonRpcProvider","contract","Contract","staking","getStakedTokens","error","console","map","e","toString"],"sources":["D:/dsdc-dashboard/packages/react-app/src/hooks/useGetStakedNFTs.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { useEthers } from \"@usedapp/core\";\r\n\r\nconst useGetStakedNFTs = (plan) => {\r\n  const [ids, setIds] = useState([]);\r\n  const { account } = useEthers();\r\n  useEffect(() => {\r\n    const fetchIds = async () => {\r\n      try {\r\n        const provider = new ethers.providers.JsonRpcProvider(\r\n          \"https://data-seed-prebsc-1-s3.binance.org:8545\"\r\n        );\r\n        const contract = new ethers.Contract(addresses.staking, abis.staking, provider);\r\n        const ids = await contract.getStakedTokens(plan, account);\r\n        setIds(ids);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    fetchIds();\r\n  }, [account, plan]);\r\n\r\n  return ids.map(e => e.toString());\r\n};\r\n\r\nexport default useGetStakedNFTs;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,QAAQ;AAC/B,SAASC,SAAS,EAAEC,IAAI,QAAQ,2BAA2B;AAC3D,SAASC,SAAS,QAAQ,eAAe;AAEzC,MAAMC,gBAAgB,GAAIC,IAAI,IAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAClC,MAAM;IAAEW;EAAQ,CAAC,GAAGN,SAAS,EAAE;EAC/BJ,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QACF,MAAMC,QAAQ,GAAG,IAAIX,MAAM,CAACY,SAAS,CAACC,eAAe,CACnD,gDAAgD,CACjD;QACD,MAAMC,QAAQ,GAAG,IAAId,MAAM,CAACe,QAAQ,CAACd,SAAS,CAACe,OAAO,EAAEd,IAAI,CAACc,OAAO,EAAEL,QAAQ,CAAC;QAC/E,MAAMJ,GAAG,GAAG,MAAMO,QAAQ,CAACG,eAAe,CAACZ,IAAI,EAAEI,OAAO,CAAC;QACzDD,MAAM,CAACD,GAAG,CAAC;MACb,CAAC,CAAC,OAAOW,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDR,QAAQ,EAAE;EACZ,CAAC,EAAE,CAACD,OAAO,EAAEJ,IAAI,CAAC,CAAC;EAEnB,OAAOE,GAAG,CAACa,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,QAAQ,EAAE,CAAC;AACnC,CAAC;AAAChB,EAAA,CArBIF,gBAAgB;EAAA,QAEAD,SAAS;AAAA;AAqB/B,eAAeC,gBAAgB"},"metadata":{},"sourceType":"module"}
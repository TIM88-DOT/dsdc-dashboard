[{"D:\\dsdc-dashboard\\packages\\react-app\\src\\index.js":"1","D:\\dsdc-dashboard\\packages\\react-app\\src\\App.js":"2","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js":"3","D:\\dsdc-dashboard\\packages\\react-app\\src\\graphql\\subgraph.js":"4","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js":"5","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js":"6","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Swap.js":"7","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Title.js":"8","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js":"9","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js":"10","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js":"11","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx":"12","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx":"13","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx":"14","D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx":"15","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedMutants\\StakedMutants.jsx":"16","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx":"17"},{"size":1182,"mtime":1678556079028,"results":"18","hashOfConfig":"19"},{"size":293,"mtime":1678557708974,"results":"20","hashOfConfig":"19"},{"size":6263,"mtime":1678843792490,"results":"21","hashOfConfig":"19"},{"size":325,"mtime":1664107510000,"results":"22","hashOfConfig":"19"},{"size":1763,"mtime":1678775333506,"results":"23","hashOfConfig":"19"},{"size":2516,"mtime":1678834882340,"results":"24","hashOfConfig":"19"},{"size":797,"mtime":1678854124961,"results":"25","hashOfConfig":"19"},{"size":352,"mtime":1677577386000,"results":"26","hashOfConfig":"19"},{"size":382,"mtime":1678675745008,"results":"27","hashOfConfig":"19"},{"size":2309,"mtime":1678844020109,"results":"28","hashOfConfig":"19"},{"size":2111,"mtime":1678556763181,"results":"29","hashOfConfig":"19"},{"size":7896,"mtime":1678730694478,"results":"30","hashOfConfig":"19"},{"size":2014,"mtime":1678679882833,"results":"31","hashOfConfig":"19"},{"size":2003,"mtime":1678501579110,"results":"32","hashOfConfig":"19"},{"size":702,"mtime":1678680206997,"results":"33","hashOfConfig":"19"},{"size":8086,"mtime":1678730708367,"results":"34","hashOfConfig":"19"},{"size":2542,"mtime":1678730218941,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a2ufmk",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},"D:\\dsdc-dashboard\\packages\\react-app\\src\\index.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\App.js",["77"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js",["78","79"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\graphql\\subgraph.js",[],["80","81"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js",["82","83","84"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Swap.js",["85"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Title.js",[],["86","87"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js",[],["88","89"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx",["90","91","92"],"import { StakedImageList } from \"../StakedImageList/StakedImageList\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport classes from \"./StakedNfts.module.scss\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useCall, useEthers, useContractFunction } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport axios from \"axios\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ButtonPrimary, ButtonSecondary } from \"../index\";\r\nimport { ethers } from \"ethers\";\r\nimport { useGetIsApprovedForAll } from \"../../hooks/useGetIsApprovedForAll\";\r\nimport { UnstakedImageList } from \"../UnstakedImageList/UnstakedImageList\";\r\n\r\nexport default function StakedNfts(props) {\r\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\r\n  const [unstakedTokensOfOwner, setUnstakedTokensOfOwner] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const plan = 0;\r\n  const [selectedStakeNFT, setSelectedStakeNFT] = useState([]);\r\n  const [selectedUnstakeNFT, setSelectedUnstakeNFT] = useState([]);\r\n  const { account, chainId, library } = useEthers();\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"90%\",\r\n    bgcolor: \"background.paper\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n  };\r\n\r\n  const dsdcContract = new Contract(addresses.dsdc, abis.dsdc);\r\n\r\n  const isApprovedForAll = useGetIsApprovedForAll(\r\n    addresses.dsdc,\r\n    abis.dsdc,\r\n    addresses.staking,\r\n    account\r\n  );\r\n\r\n  const { error: walletOfOwnerError, value: walletOfOwnerValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.dsdc, abis.dsdc),\r\n        method: \"walletOfOwner\",\r\n        args: [account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (walletOfOwnerError) {\r\n    console.log(walletOfOwnerError);\r\n  }\r\n\r\n  const { error: stakedNftsError, value: stakedNftsValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.staking, abis.staking),\r\n        method: \"getStakedTokens\",\r\n        args: [plan, account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (stakedNftsError) {\r\n    console.log(stakedNftsError);\r\n  }\r\n\r\n  const { state: setApprovalForAllState, send: setApprovalForAll } =\r\n    useContractFunction(dsdcContract, \"setApprovalForAll\", {\r\n      transactionName: \"setApprovalForAll\",\r\n    });\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const approveMaxDsdc = async () => {\r\n    await setApprovalForAll(addresses.staking, 1);\r\n  };\r\n\r\n  async function getNftsData(userNfts) {\r\n    const tokenData = [];\r\n    for (var j = 0; j < userNfts?.length; j++) {\r\n      const dsdcMetaData = await axios.get(\r\n        `https://bafybeigmbv6qevyposswcncodvket6bl34chc4j6326akxg2xj6arkmfwu.ipfs.nftstorage.link/${userNfts[j]}.json`\r\n      );\r\n      const nftTokenData = {\r\n        img: `https://drunkskunksdc.mypinata.cloud/ipfs/${dsdcMetaData.data.image.slice(\r\n          7\r\n        )}`,\r\n        title: dsdcMetaData.data.name,\r\n        tokenId: userNfts[j],\r\n      };\r\n      tokenData.push(nftTokenData);\r\n    }\r\n\r\n    return tokenData;\r\n  }\r\n\r\n  const onPickClick = async () => {\r\n    if (account) {\r\n      setStakeLoading(true);\r\n      if (isApprovedForAll === undefined) {\r\n        setLoading(true);\r\n      } else {\r\n        setOpen(true);\r\n        setLoading(true);\r\n        setSelectedUnstakeNFT([]);\r\n        const allNfts = walletOfOwnerValue?.[0].map((e) => Number(e));\r\n        const tokensOfOwner = await getNftsData(allNfts);\r\n        setUnstakedTokensOfOwner(tokensOfOwner);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    setStakeLoading(false);\r\n  };\r\n\r\n  const onStake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedStakeNFT.length > 0) {\r\n      try {\r\n        console.log(\"plan\", plan);\r\n        console.log(\"selected Stake NFT\", selectedStakeNFT);\r\n        await dsdcStakingContract.stake(plan, selectedStakeNFT);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onUnstake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedUnstakeNFT.length > 0) {\r\n      setUnstakeLoading(true);\r\n      try {\r\n        await dsdcStakingContract.unstake(plan, selectedUnstakeNFT);\r\n        setUnstakeLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setUnstakeLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSelect = async () => {\r\n    setConfirmLoading(true);\r\n    if (isApprovedForAll === false) {\r\n      await approveMaxDsdc();\r\n      await onStake();\r\n      setConfirmLoading(false);\r\n      setOpen(false);\r\n      return;\r\n    }\r\n    await onStake();\r\n    setConfirmLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      const stakedNfts = stakedNftsValue?.[0].map((e) => Number(e));\r\n      console.log(\"staked nfts\", stakedNfts);\r\n      getData(stakedNfts);\r\n    }\r\n\r\n    async function getData(stakedNfts) {\r\n      const tokenData = await getNftsData(stakedNfts);\r\n      setTokensOfOwner(tokenData);\r\n    }\r\n  }, [account, stakedNftsValue]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h2>YOUR STAKED DSDC(S)</h2>\r\n      {stakedNftsValue?.[0].length > 0 ? (\r\n        loading ? (\r\n          <div className={classes.loading}>\r\n            <Typography\r\n              sx={{ marginBottom: \"35px\" }}\r\n              variant=\"h6\"\r\n              component=\"h4\"\r\n            >\r\n              Fetching your staked DSDC...\r\n            </Typography>\r\n            <CircularProgress color=\"warning\" />\r\n          </div>\r\n        ) : (\r\n          <StakedImageList\r\n            selectedUnstakeNFT={selectedUnstakeNFT}\r\n            setSelectedUnstakeNFT={setSelectedUnstakeNFT}\r\n            itemData={tokensOfOwner}\r\n          />\r\n        )\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onPickClick}>\r\n          {stakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"STAKE\"}\r\n        </ButtonPrimary>\r\n        <ButtonSecondary onClick={onUnstake}>\r\n          {unstakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"UNSTAKE\"}\r\n        </ButtonSecondary>\r\n      </div>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Fade in={open}>\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n              SELECT YOUR DSDC TO STAKE:\r\n            </Typography>\r\n\r\n            <UnstakedImageList\r\n              itemData={unstakedTokensOfOwner}\r\n              selectedStakeNFT={selectedStakeNFT}\r\n              setSelectedStakeNFT={setSelectedStakeNFT}\r\n              loading={loading}\r\n            />\r\n            <ButtonPrimary style={{ float: \"right\" }} onClick={onSelect}>\r\n              {confirmLoading ? (\r\n                <CircularProgress size='1.5rem' color=\"warning\" />\r\n              ) : (\r\n                \"CONFIRM\"\r\n              )}\r\n            </ButtonPrimary>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx",["93"],"import { Contract } from \"@ethersproject/contracts\";\r\nimport { useCall, useEthers } from \"@usedapp/core\";\r\n\r\nexport function useGetIsApprovedForAll(\r\n  contractAddress,\r\n  contractAbi,\r\n  stakingAddress,\r\n  address\r\n) {\r\n  const { value, error } =\r\n    useCall(\r\n      address &&\r\n        contractAddress && {\r\n          contract: new Contract(contractAddress, contractAbi), // instance of called contract\r\n          method: \"isApprovedForAll\", // Method to be called\r\n          args: [address, stakingAddress], // Method arguments - address to be checked for balance\r\n        }\r\n    ) ?? {};\r\n  if (error) {\r\n    console.error(error.message);\r\n    return undefined;\r\n  }\r\n  \r\n  return value?.[0];\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedMutants\\StakedMutants.jsx",["94","95","96","97","98"],"import { StakedImageList } from \"../StakedImageList/StakedImageList\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport classes from \"./StakedMutants.module.scss\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useCall, useEthers, useContractFunction } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport axios from \"axios\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ButtonPrimary, ButtonSecondary } from \"../index\";\r\nimport { ethers } from \"ethers\";\r\nimport { useGetIsApprovedForAll } from \"../../hooks/useGetIsApprovedForAll\";\r\nimport { UnstakedImageList } from \"../UnstakedImageList/UnstakedImageList\";\r\n\r\nexport default function StakedMutants(props) {\r\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\r\n  const [unstakedTokensOfOwner, setUnstakedTokensOfOwner] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const plan = 1;\r\n  const [selectedStakeNFT, setSelectedStakeNFT] = useState([]);\r\n  const [selectedUnstakeNFT, setSelectedUnstakeNFT] = useState([]);\r\n  const { account, library } = useEthers();\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"90%\",\r\n    bgcolor: \"background.paper\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n  };\r\n\r\n  const mutantsContract = new Contract(addresses.mutants, abis.mutants);\r\n\r\n  const isApprovedForAll = useGetIsApprovedForAll(\r\n    addresses.mutants,\r\n    abis.mutants,\r\n    addresses.staking,\r\n    account\r\n  );\r\n\r\n  const { error: walletOfOwnerError, value: walletOfOwnerValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.mutants, abis.mutants),\r\n        method: \"tokensOfOwner\",\r\n        args: [account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (walletOfOwnerError) {\r\n    console.log(walletOfOwnerError);\r\n  }\r\n\r\n  const { error: stakedNftsError, value: stakedNftsValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.staking, abis.staking),\r\n        method: \"getStakedTokens\",\r\n        args: [plan, account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (stakedNftsError) {\r\n    console.log(stakedNftsError);\r\n  }\r\n\r\n  const { state: setApprovalForAllState, send: setApprovalForAll } =\r\n    useContractFunction(mutantsContract, \"setApprovalForAll\", {\r\n      transactionName: \"setApprovalForAll\",\r\n    });\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const approveMaxDsdc = async () => {\r\n    await setApprovalForAll(addresses.staking, 1);\r\n  };\r\n\r\n  async function getNftsData(userNfts) {\r\n    const tokenData = [];\r\n    for (var j = 0; j < userNfts?.length; j++) {\r\n      const mutantsMetaData = await axios.get(\r\n        `https://drunkskunksdc.mypinata.cloud/ipfs/QmadV6pf2fzgmo3NDbx5fuyxNZUcTaNiGSKbNx3FoWkgAG/${userNfts[j]}.json`\r\n      );\r\n      const nftTokenData = {\r\n        img: `https://drunkskunksdc.mypinata.cloud/ipfs/${mutantsMetaData.data.image.slice(\r\n          7\r\n        )}`,\r\n        title: mutantsMetaData.data.name,\r\n        tokenId: userNfts[j],\r\n      };\r\n      tokenData.push(nftTokenData);\r\n    }\r\n\r\n    return tokenData;\r\n  }\r\n\r\n  const onPickClick = async () => {\r\n    if (account) {\r\n      setStakeLoading(true);\r\n      if (isApprovedForAll === undefined) {\r\n        setLoading(true);\r\n      } else {\r\n        setOpen(true);\r\n        setLoading(true);\r\n        setSelectedUnstakeNFT([]);\r\n        const allNfts = walletOfOwnerValue?.[0].map((e) => Number(e));\r\n        const tokensOfOwner = await getNftsData(allNfts);\r\n        setUnstakedTokensOfOwner(tokensOfOwner);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    setStakeLoading(false);\r\n  };\r\n\r\n  const onStake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedStakeNFT.length > 0) {\r\n      try {\r\n        console.log(\"plan\", plan);\r\n        console.log(\"selected Stake NFT\", selectedStakeNFT);\r\n        await dsdcStakingContract.stake(plan, selectedStakeNFT);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onUnstake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedUnstakeNFT.length > 0) {\r\n      setUnstakeLoading(true);\r\n      try {\r\n        await dsdcStakingContract.unstake(plan, selectedUnstakeNFT);\r\n        setUnstakeLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setUnstakeLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSelect = async () => {\r\n    setConfirmLoading(true);\r\n    if (isApprovedForAll === false) {\r\n      await approveMaxDsdc();\r\n      await onStake();\r\n      setConfirmLoading(false);\r\n      setOpen(false);\r\n      return;\r\n    }\r\n    await onStake();\r\n    setConfirmLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      const stakedNfts = stakedNftsValue?.[0].map((e) => Number(e));\r\n      console.log(\"staked nfts\", stakedNfts);\r\n      getData(stakedNfts);\r\n    }\r\n\r\n    async function getData(stakedNfts) {\r\n      const tokenData = await getNftsData(stakedNfts);\r\n      setTokensOfOwner(tokenData);\r\n    }\r\n  }, [account, stakedNftsValue]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h2>YOUR STAKED MUTANT(S)</h2>\r\n      {stakedNftsValue?.[0].length > 0 ? (\r\n        loading ? (\r\n          <div className={classes.loading}>\r\n            <Typography\r\n              sx={{ marginBottom: \"35px\" }}\r\n              variant=\"h6\"\r\n              component=\"h4\"\r\n            >\r\n              Fetching your staked DSDC...\r\n            </Typography>\r\n            <CircularProgress color=\"warning\" />\r\n          </div>\r\n        ) : (\r\n          <StakedImageList\r\n            selectedUnstakeNFT={selectedUnstakeNFT}\r\n            setSelectedUnstakeNFT={setSelectedUnstakeNFT}\r\n            itemData={tokensOfOwner}\r\n          />\r\n        )\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onPickClick}>\r\n          {stakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"STAKE\"}\r\n        </ButtonPrimary>\r\n        <ButtonSecondary onClick={onUnstake}>\r\n          {unstakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"UNSTAKE\"}\r\n        </ButtonSecondary>\r\n      </div>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Fade in={open}>\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n              SELECT YOUR DSDC TO STAKE:\r\n            </Typography>\r\n\r\n            <UnstakedImageList\r\n              itemData={unstakedTokensOfOwner}\r\n              selectedStakeNFT={selectedStakeNFT}\r\n              setSelectedStakeNFT={setSelectedStakeNFT}\r\n              loading={loading}\r\n            />\r\n            <ButtonPrimary style={{ float: \"right\" }} onClick={onSelect}>\r\n              {confirmLoading ? (\r\n                <CircularProgress size='1.5rem' color=\"warning\" />\r\n              ) : (\r\n                \"CONFIRM\"\r\n              )}\r\n            </ButtonPrimary>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx",["99","100","101","102"],"import classes from \"./TotalRewards.module.scss\";\r\nimport { ButtonPrimary } from \"../index\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useCall, useEthers } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useState, useContext } from \"react\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport default function TotalRewards(props) {\r\n  const { account, chainId, library } = useEthers();\r\n  const [loading, setLoading] = useState(false);\r\n  const plan = props.plan;\r\n  const { error: totalRewardsError, value: totalRewardsValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.staking, abis.staking),\r\n        method: \"getEarnedRewards\",\r\n        args: [plan, account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (totalRewardsError) {\r\n    console.log(totalRewardsError);\r\n  } else {\r\n  }\r\n  const onClaim = async () => {\r\n    if (account) {\r\n      const signer = library.getSigner();\r\n      const mutantsStakingContract = new ethers.Contract(\r\n        addresses.staking,\r\n        abis.staking,\r\n        signer\r\n      );\r\n      if (Number(totalRewardsValue[0]) > 0) {\r\n        try {\r\n          await mutantsStakingContract.claimEarnedReward(plan);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes[\"prize-container\"]}>\r\n      <h2 style={{ padding: \"0.7rem\" }}>YOUR REWARDS</h2>\r\n      {account ? (\r\n        <div>\r\n          <Typography\r\n            sx={{ textAlign: \"center\", fontSize: \"16px\" }}\r\n            variant=\"h6\"\r\n            component=\"h6\"\r\n          >\r\n            TOTAL :\r\n          </Typography>\r\n\r\n          <Typography variant=\"h6\" component=\"h6\" sx={{ color: \"#7b9c13\" }}>\r\n            {totalRewardsValue &&\r\n              ethers.utils.formatEther(totalRewardsValue[0])}\r\n          </Typography>\r\n\r\n          <Typography\r\n            sx={{ textAlign: \"center\", fontSize: \"16px\" }}\r\n            variant=\"h6\"\r\n            component=\"h6\"\r\n          >\r\n            CLAIMABLE :\r\n          </Typography>\r\n\r\n          <Typography variant=\"h6\" component=\"h6\" sx={{ color: \"#7b9c13\" }}>\r\n            {totalRewardsValue &&\r\n              ethers.utils.formatEther(totalRewardsValue[1])}\r\n          </Typography>\r\n        </div>\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onClaim}>CLAIM</ButtonPrimary>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"103","severity":1,"message":"104","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"107","line":12,"column":8,"nodeType":"105","messageId":"106","endLine":12,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":157,"column":13,"nodeType":"110","endLine":160,"endColumn":29},{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"103","severity":1,"message":"115","line":7,"column":8,"nodeType":"105","messageId":"106","endLine":7,"endColumn":24},{"ruleId":"103","severity":1,"message":"116","line":8,"column":8,"nodeType":"105","messageId":"106","endLine":8,"endColumn":18},{"ruleId":"103","severity":1,"message":"117","line":9,"column":8,"nodeType":"105","messageId":"106","endLine":9,"endColumn":16},{"ruleId":"118","severity":1,"message":"119","line":13,"column":7,"nodeType":"110","endLine":13,"endColumn":477},{"ruleId":"111","replacedBy":"120"},{"ruleId":"113","replacedBy":"121"},{"ruleId":"111","replacedBy":"122"},{"ruleId":"113","replacedBy":"123"},{"ruleId":"103","severity":1,"message":"124","line":8,"column":31,"nodeType":"105","messageId":"106","endLine":8,"endColumn":41},{"ruleId":"103","severity":1,"message":"125","line":26,"column":20,"nodeType":"105","messageId":"106","endLine":26,"endColumn":27},{"ruleId":"103","severity":1,"message":"126","line":78,"column":18,"nodeType":"105","messageId":"106","endLine":78,"endColumn":40},{"ruleId":"103","severity":1,"message":"127","line":2,"column":19,"nodeType":"105","messageId":"106","endLine":2,"endColumn":28},{"ruleId":"103","severity":1,"message":"128","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":17},{"ruleId":"103","severity":1,"message":"129","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":24},{"ruleId":"103","severity":1,"message":"130","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":14},{"ruleId":"103","severity":1,"message":"124","line":11,"column":31,"nodeType":"105","messageId":"106","endLine":11,"endColumn":41},{"ruleId":"103","severity":1,"message":"126","line":81,"column":18,"nodeType":"105","messageId":"106","endLine":81,"endColumn":40},{"ruleId":"103","severity":1,"message":"124","line":6,"column":20,"nodeType":"105","messageId":"106","endLine":6,"endColumn":30},{"ruleId":"103","severity":1,"message":"125","line":11,"column":20,"nodeType":"105","messageId":"106","endLine":11,"endColumn":27},{"ruleId":"103","severity":1,"message":"131","line":12,"column":10,"nodeType":"105","messageId":"106","endLine":12,"endColumn":17},{"ruleId":"103","severity":1,"message":"132","line":12,"column":19,"nodeType":"105","messageId":"106","endLine":12,"endColumn":29},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Badge' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-native-reassign",["133"],"no-negated-in-lhs",["134"],"'ShoppingCartIcon' is defined but never used.","'PeopleIcon' is defined but never used.","'MenuIcon' is defined but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.",["133"],["134"],["133"],["134"],"'useContext' is defined but never used.","'chainId' is assigned a value but never used.","'setApprovalForAllState' is assigned a value but never used.","'useEthers' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
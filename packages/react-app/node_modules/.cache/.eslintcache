[{"D:\\dsdc-dashboard\\packages\\react-app\\src\\index.js":"1","D:\\dsdc-dashboard\\packages\\react-app\\src\\App.js":"2","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js":"3","D:\\dsdc-dashboard\\packages\\react-app\\src\\graphql\\subgraph.js":"4","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js":"5","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js":"6","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Swap.js":"7","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Title.js":"8","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js":"9","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js":"10","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js":"11","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx":"12","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx":"13","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx":"14","D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx":"15","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedMutants\\StakedMutants.jsx":"16","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx":"17"},{"size":1182,"mtime":1679938747355,"results":"18","hashOfConfig":"19"},{"size":293,"mtime":1678557708974,"results":"20","hashOfConfig":"19"},{"size":6263,"mtime":1678843792490,"results":"21","hashOfConfig":"19"},{"size":325,"mtime":1664107510000,"results":"22","hashOfConfig":"19"},{"size":1790,"mtime":1678861257398,"results":"23","hashOfConfig":"19"},{"size":2190,"mtime":1679922318652,"results":"24","hashOfConfig":"19"},{"size":3612,"mtime":1678861969267,"results":"25","hashOfConfig":"19"},{"size":352,"mtime":1677577386000,"results":"26","hashOfConfig":"19"},{"size":382,"mtime":1678675745008,"results":"27","hashOfConfig":"19"},{"size":2453,"mtime":1679931645173,"results":"28","hashOfConfig":"19"},{"size":2111,"mtime":1678556763181,"results":"29","hashOfConfig":"19"},{"size":7896,"mtime":1678730694478,"results":"30","hashOfConfig":"19"},{"size":2014,"mtime":1678679882833,"results":"31","hashOfConfig":"19"},{"size":2003,"mtime":1678501579110,"results":"32","hashOfConfig":"19"},{"size":702,"mtime":1678680206997,"results":"33","hashOfConfig":"19"},{"size":8086,"mtime":1679938491117,"results":"34","hashOfConfig":"19"},{"size":2542,"mtime":1678730218941,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a2ufmk",{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"41"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"41"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"41"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"41"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"41"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"41"},"D:\\dsdc-dashboard\\packages\\react-app\\src\\index.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\App.js",["80"],"import React, { useEffect } from \"react\";\nimport { Container} from \"./components\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  // Read more about useDapp on https://usedapp.io/\n  return (\n    <Container>\n      <Dashboard />\n    </Container>\n  );\n}\n\nexport default App;\n",["81","82"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js",["83","84"],"import * as React from 'react';\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport MuiDrawer from '@mui/material/Drawer';\nimport Box from '@mui/material/Box';\nimport MuiAppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport List from '@mui/material/List';\nimport Typography from '@mui/material/Typography';\nimport Divider from '@mui/material/Divider';\nimport IconButton from '@mui/material/IconButton';\nimport Badge from '@mui/material/Badge';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Link from '@mui/material/Link';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport logo from \"../logo.png\";\nimport { mainListItems, secondaryListItems } from './listItems';\nimport Swap from './Swap';\nimport { grey } from '@mui/material/colors';\nimport { Route, Routes } from 'react-router-dom';\nimport NftStaking from './NftStaking/NftStaking';\nimport StakedNfts from './StakedNfts/StakedNfts';\nimport WalletButton from './WalletButton';\nimport StakedMutants from './StakedMutants/StakedMutants';\nimport TotalRewards from './TotalRewards/TotalRewards';\nfunction Copyright(props) {\n  return (\n    <Typography variant=\"body2\" color=\"text.secondary\" align=\"center\" {...props}>\n      {'Copyright Â© '}\n      <Link color=\"inherit\" href=\"https://drunkskunksdc.com/\">\n        Drunk Skunks Drinking Club\n      </Link>{' '}\n      {new Date().getFullYear()}\n      {'.'}\n    </Typography>\n  );\n}\n\nconst drawerWidth = 240;\n\nconst AppBar = styled(MuiAppBar, {\n  shouldForwardProp: (prop) => prop !== 'open',\n})(({ theme, open }) => ({\n  zIndex: theme.zIndex.drawer + 1,\n  transition: theme.transitions.create(['width', 'margin'], {\n    easing: theme.transitions.easing.sharp,\n    duration: theme.transitions.duration.leavingScreen,\n  }),\n  ...(open && {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['width', 'margin'], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  }),\n}));\n\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\n  ({ theme, open }) => ({\n    '& .MuiDrawer-paper': {\n      position: 'relative',\n      whiteSpace: 'nowrap',\n      width: drawerWidth,\n      backgroundColor: \"#020202\",\n      transition: theme.transitions.create('width', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      boxSizing: 'border-box',\n      ...(!open && {\n        overflowX: 'hidden',\n        transition: theme.transitions.create('width', {\n          easing: theme.transitions.easing.sharp,\n          duration: theme.transitions.duration.leavingScreen,\n        }),\n        width: theme.spacing(7),\n        [theme.breakpoints.up('sm')]: {\n          width: theme.spacing(9),\n        },\n      }),\n    },\n  }),\n);\n\nconst mdTheme = createTheme({\n  palette: {\n    mode: 'dark',\n    primary: {\n      main: '#bfc500',\n    },\n    divider: '#bfc500',\n    text: {\n      primary: '#fff',\n      secondary: grey[500],\n    },\n  },\n  typography: {\n    fontFamily: \"Montserrat, sans-serif\",\n  },\n});\n\nfunction DashboardContent() {\n  const [open, setOpen] = React.useState(true);\n  const toggleDrawer = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <ThemeProvider theme={mdTheme}>\n      <Box sx={{ display: 'flex' }}>\n        <CssBaseline />\n        <AppBar position=\"absolute\" open={open}>\n          <Toolbar\n            sx={{\n              backgroundColor: \"#020202\",\n              borderBottom:\"1px solid #bfc500\",\n              pr: '24px', // keep right padding when drawer closed\n            }}\n          >\n            <IconButton\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"open drawer\"\n              onClick={toggleDrawer}\n              sx={{\n                marginRight: '36px',\n                ...(open && { display: 'none' }),\n              }}\n            >\n              <MenuIcon />\n            </IconButton>\n            <Typography\n              component=\"h1\"\n              variant=\"h6\"\n              color=\"inherit\"\n              noWrap\n              sx={{ flexGrow: 1 }}\n            >\n              Dashboard\n            </Typography>\n            <WalletButton />\n          </Toolbar>\n        </AppBar>\n        <Drawer variant=\"permanent\" open={open}>\n          <Toolbar\n            sx={{\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'flex-end',\n              px: [1],\n              backgroundColor: (theme) => \"#020202\"\n            }}\n          >\n            <img style={{\n              width: \"9em\",\n              margin: \"auto\"\n            }} src={logo} />\n            <IconButton onClick={toggleDrawer}>\n              <ChevronLeftIcon />\n            </IconButton>\n          </Toolbar>\n          <Divider />\n          <List component=\"nav\">\n            {mainListItems}\n            <Divider sx={{ my: 1 }} />\n            {secondaryListItems}\n          </List>\n        </Drawer>\n        <Box\n          component=\"main\"\n          sx={{\n            backgroundColor: (theme) => \"#020202\",\n            flexGrow: 1,\n            height: '100vh',\n            overflow: 'auto',\n          }}\n        >\n          <Toolbar />\n          <Container maxWidth=\"lg\" sx={{ mt: 1, mb: 4 }}>\n            <Grid container\n              justifyContent=\"center\"\n              alignItems=\"center\" item xs={12}>\n              <Routes>\n                <Route path=\"/\" element={<Swap />} />\n                <Route path=\"stake\" element={<NftStaking />} />\n                <Route path=\"stake/dsdc\" element={<><StakedNfts /> <TotalRewards plan={0} /> </>} />\n                <Route path=\"stake/dsdc-mutants\" element={<><StakedMutants /> <TotalRewards plan={1} /> </>} />\n              </Routes>\n            </Grid>\n            <Copyright sx={{ position: \"sticky\", bottom: \"-50px\", left: \"50%\" }} />\n          </Container>\n        </Box>\n      </Box>\n    </ThemeProvider>\n  );\n}\n\nexport default function Dashboard() {\n  return <DashboardContent />;\n}\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\graphql\\subgraph.js",[],["85","86"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js",["87"],"import * as React from 'react';\nimport ListItemButton from '@mui/material/ListItemButton';\nimport ListItemIcon from '@mui/material/ListItemIcon';\nimport ListItemText from '@mui/material/ListItemText';\nimport ListSubheader from '@mui/material/ListSubheader';\nimport SwapVertIcon from '@mui/icons-material/SwapVert';\nimport RocketLaunchIcon from '@mui/icons-material/RocketLaunch';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport PublicIcon from '@mui/icons-material/Public';\nimport AgricultureIcon from '@mui/icons-material/Agriculture';\nimport TelegramIcon from '@mui/icons-material/Telegram';\nimport TwitterIcon from '@mui/icons-material/Twitter';\nimport { Link } from \"react-router-dom\";\n\nconst linkStyle = {\n  margin: \" 0\",\n  fontFamily: \"Montserrat, sans-serif\",\n  fontWeight: \"400\",\n  fontSize: \"1rem\",\n  lineHeight: \"1.5\",\n  display: \"block\",\n  color: \"#fff\",\n  textDecoration: \"none\"\n}\nexport const mainListItems = (\n\n  <React.Fragment>\n\n    <Link style={linkStyle} to={`/`}>\n      <ListItemButton>\n        <ListItemIcon>\n          <SwapVertIcon />\n        </ListItemIcon>\n        Swap\n      </ListItemButton>\n    </Link>\n\n    <Link style={linkStyle} to={`stake`}>\n      <ListItemButton>\n        <ListItemIcon>\n          <RocketLaunchIcon />\n        </ListItemIcon>\n        NFT Staking\n      </ListItemButton>\n    </Link>\n\n    <ListItemButton>\n      <ListItemIcon>\n        <MonetizationOnIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Token Staking\" />\n    </ListItemButton>\n\n  </React.Fragment>\n);\n\nexport const secondaryListItems = (\n  <React.Fragment>\n    <ListSubheader sx={{backgroundColor: \"#020202\"}} component=\"div\" inset>\n      Socials\n    </ListSubheader>\n    <ListItemButton>\n      <ListItemIcon>\n        <TelegramIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Telegram\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <TwitterIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Twitter\" />\n    </ListItemButton>\n    <ListItemButton>\n      <ListItemIcon>\n        <PublicIcon />\n      </ListItemIcon>\n      <ListItemText primary=\"Website\" />\n    </ListItemButton>\n  </React.Fragment>\n);\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Swap.js",["88","89"],"import React, { useState } from 'react';\r\nimport { ThemeProvider } from 'styled-components'\r\nimport { Button, Card, CardBody, Flex, Heading, Text, Input, TokenImage, SwapVertIcon } from '@pancakeswap/uikit';\r\nimport { dark } from '@pancakeswap/uikit'\r\nimport { ButtonPrimary } from '.';\r\nimport BNB from '../assets/images/bnb.png';\r\nimport STINK from '../assets/images/stink.jpg';\r\nimport { border } from '@mui/system';\r\n\r\nconst Swap = () => {\r\n  const [fromToken, setFromToken] = useState('BNB');\r\n  const [toToken, setToToken] = useState('STINK');\r\n  const [fromTokenLogo, setFromTokenLogo] = useState(BNB);\r\n  const [toTokenLogo, setToTokenLogo] = useState(STINK);\r\n  const [fromTokenAmount, setFromTokenAmount] = useState('');\r\n  const [toTokenAmount, setToTokenAmount] = useState('');\r\n\r\n  const handleFromTokenAmountChange = (e) => {\r\n    setFromTokenAmount(e.target.value);\r\n  };\r\n\r\n  const handleToTokenAmountChange = (e) => {\r\n    setToTokenAmount(e.target.value);\r\n  };\r\n\r\n  const handleSwap = () => {\r\n    // Do the swap\r\n    console.log(`Swapping ${fromTokenAmount} ${fromToken} for ${toTokenAmount} ${toToken}`);\r\n  };\r\n\r\n  const handleSwitchTokens = () => {\r\n    // Switch the from and to tokens\r\n    const tempToken = fromToken;\r\n    const tempAmount = fromTokenAmount;\r\n    const tempLogo = fromTokenLogo;\r\n    setFromToken(toToken);\r\n    setFromTokenLogo(toTokenLogo)\r\n    setToTokenLogo(tempLogo)\r\n    setToToken(tempToken);\r\n    setFromTokenAmount(toTokenAmount);\r\n    setToTokenAmount(tempAmount);\r\n\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={dark}>\r\n      <Card style={{\r\n        marginTop: \"56px\",\r\n        marginBottom: \"100px\",\r\n        background: \"#020202\",\r\n        border: \"1px solid #bfc500\"\r\n      }}>\r\n        <CardBody style={{\r\n          background: \"#020202\",\r\n        }}>\r\n          <Flex justifyContent=\"space-between\" alignItems=\"center\">\r\n            <Heading>Swap</Heading>\r\n          </Flex>\r\n          <Text>Buy and sell $STINK</Text>\r\n          <Flex flexDirection=\"column\" mt=\"24px\">\r\n            <Flex justifyContent=\"space-between\">\r\n              <Text>From</Text>\r\n              <Text>{`Balance: 100.0 ${fromToken}`}</Text>\r\n            </Flex>\r\n            <Flex mb=\"16px\" alignItems=\"center\">\r\n              <Input style={{ marginBlock: \"8px\" }} type=\"number\"\r\n                placeholder=\"0.0\"\r\n                value={fromTokenAmount}\r\n                onChange={handleFromTokenAmountChange}\r\n                mt=\"8px\"\r\n                flex=\"1\" />\r\n              <Text mx=\"8px\">{fromToken}</Text>\r\n              <TokenImage src={fromTokenLogo} height={35} width={35} title={\"BNB\"} />\r\n            </Flex>\r\n            <div style={{ margin: \"auto\" }} onClick={handleSwitchTokens}>\r\n              <SwapVertIcon width=\"35px\" />\r\n            </div>\r\n            <Flex justifyContent=\"space-between\" mt=\"16px\">\r\n              <Text>To</Text>\r\n              <Text>{`Balance: 100.0 ${toToken}`}</Text>\r\n            </Flex>\r\n            <Flex mb=\"24px\" alignItems=\"center\">\r\n\r\n              <Input style={{ marginBlock: \"8px\" }} type=\"number\"\r\n                placeholder=\"0.0\"\r\n                value={toTokenAmount}\r\n                onChange={handleToTokenAmountChange}\r\n                flex=\"1\" />\r\n              <Text mx=\"8px\">{toToken}</Text>\r\n              <TokenImage src={toTokenLogo} height={35} width={35} title={\"$STINK\"} />\r\n\r\n            </Flex>\r\n            <ButtonPrimary onClick={handleSwap}>\r\n              Swap\r\n            </ButtonPrimary>\r\n          </Flex>\r\n        </CardBody>\r\n      </Card>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default Swap;","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Title.js",[],["90","91"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js",["92"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx",["93","94","95"],"import { StakedImageList } from \"../StakedImageList/StakedImageList\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport classes from \"./StakedNfts.module.scss\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useCall, useEthers, useContractFunction } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport axios from \"axios\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ButtonPrimary, ButtonSecondary } from \"../index\";\r\nimport { ethers } from \"ethers\";\r\nimport { useGetIsApprovedForAll } from \"../../hooks/useGetIsApprovedForAll\";\r\nimport { UnstakedImageList } from \"../UnstakedImageList/UnstakedImageList\";\r\n\r\nexport default function StakedNfts(props) {\r\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\r\n  const [unstakedTokensOfOwner, setUnstakedTokensOfOwner] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const plan = 0;\r\n  const [selectedStakeNFT, setSelectedStakeNFT] = useState([]);\r\n  const [selectedUnstakeNFT, setSelectedUnstakeNFT] = useState([]);\r\n  const { account, chainId, library } = useEthers();\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"90%\",\r\n    bgcolor: \"background.paper\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n  };\r\n\r\n  const dsdcContract = new Contract(addresses.dsdc, abis.dsdc);\r\n\r\n  const isApprovedForAll = useGetIsApprovedForAll(\r\n    addresses.dsdc,\r\n    abis.dsdc,\r\n    addresses.staking,\r\n    account\r\n  );\r\n\r\n  const { error: walletOfOwnerError, value: walletOfOwnerValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.dsdc, abis.dsdc),\r\n        method: \"walletOfOwner\",\r\n        args: [account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (walletOfOwnerError) {\r\n    console.log(walletOfOwnerError);\r\n  }\r\n\r\n  const { error: stakedNftsError, value: stakedNftsValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.staking, abis.staking),\r\n        method: \"getStakedTokens\",\r\n        args: [plan, account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (stakedNftsError) {\r\n    console.log(stakedNftsError);\r\n  }\r\n\r\n  const { state: setApprovalForAllState, send: setApprovalForAll } =\r\n    useContractFunction(dsdcContract, \"setApprovalForAll\", {\r\n      transactionName: \"setApprovalForAll\",\r\n    });\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const approveMaxDsdc = async () => {\r\n    await setApprovalForAll(addresses.staking, 1);\r\n  };\r\n\r\n  async function getNftsData(userNfts) {\r\n    const tokenData = [];\r\n    for (var j = 0; j < userNfts?.length; j++) {\r\n      const dsdcMetaData = await axios.get(\r\n        `https://bafybeigmbv6qevyposswcncodvket6bl34chc4j6326akxg2xj6arkmfwu.ipfs.nftstorage.link/${userNfts[j]}.json`\r\n      );\r\n      const nftTokenData = {\r\n        img: `https://drunkskunksdc.mypinata.cloud/ipfs/${dsdcMetaData.data.image.slice(\r\n          7\r\n        )}`,\r\n        title: dsdcMetaData.data.name,\r\n        tokenId: userNfts[j],\r\n      };\r\n      tokenData.push(nftTokenData);\r\n    }\r\n\r\n    return tokenData;\r\n  }\r\n\r\n  const onPickClick = async () => {\r\n    if (account) {\r\n      setStakeLoading(true);\r\n      if (isApprovedForAll === undefined) {\r\n        setLoading(true);\r\n      } else {\r\n        setOpen(true);\r\n        setLoading(true);\r\n        setSelectedUnstakeNFT([]);\r\n        const allNfts = walletOfOwnerValue?.[0].map((e) => Number(e));\r\n        const tokensOfOwner = await getNftsData(allNfts);\r\n        setUnstakedTokensOfOwner(tokensOfOwner);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    setStakeLoading(false);\r\n  };\r\n\r\n  const onStake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedStakeNFT.length > 0) {\r\n      try {\r\n        console.log(\"plan\", plan);\r\n        console.log(\"selected Stake NFT\", selectedStakeNFT);\r\n        await dsdcStakingContract.stake(plan, selectedStakeNFT);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onUnstake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedUnstakeNFT.length > 0) {\r\n      setUnstakeLoading(true);\r\n      try {\r\n        await dsdcStakingContract.unstake(plan, selectedUnstakeNFT);\r\n        setUnstakeLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setUnstakeLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSelect = async () => {\r\n    setConfirmLoading(true);\r\n    if (isApprovedForAll === false) {\r\n      await approveMaxDsdc();\r\n      await onStake();\r\n      setConfirmLoading(false);\r\n      setOpen(false);\r\n      return;\r\n    }\r\n    await onStake();\r\n    setConfirmLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      const stakedNfts = stakedNftsValue?.[0].map((e) => Number(e));\r\n      console.log(\"staked nfts\", stakedNfts);\r\n      getData(stakedNfts);\r\n    }\r\n\r\n    async function getData(stakedNfts) {\r\n      const tokenData = await getNftsData(stakedNfts);\r\n      setTokensOfOwner(tokenData);\r\n    }\r\n  }, [account, stakedNftsValue]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h2>YOUR STAKED DSDC(S)</h2>\r\n      {stakedNftsValue?.[0].length > 0 ? (\r\n        loading ? (\r\n          <div className={classes.loading}>\r\n            <Typography\r\n              sx={{ marginBottom: \"35px\" }}\r\n              variant=\"h6\"\r\n              component=\"h4\"\r\n            >\r\n              Fetching your staked DSDC...\r\n            </Typography>\r\n            <CircularProgress color=\"warning\" />\r\n          </div>\r\n        ) : (\r\n          <StakedImageList\r\n            selectedUnstakeNFT={selectedUnstakeNFT}\r\n            setSelectedUnstakeNFT={setSelectedUnstakeNFT}\r\n            itemData={tokensOfOwner}\r\n          />\r\n        )\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onPickClick}>\r\n          {stakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"STAKE\"}\r\n        </ButtonPrimary>\r\n        <ButtonSecondary onClick={onUnstake}>\r\n          {unstakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"UNSTAKE\"}\r\n        </ButtonSecondary>\r\n      </div>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Fade in={open}>\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n              SELECT YOUR DSDC TO STAKE:\r\n            </Typography>\r\n\r\n            <UnstakedImageList\r\n              itemData={unstakedTokensOfOwner}\r\n              selectedStakeNFT={selectedStakeNFT}\r\n              setSelectedStakeNFT={setSelectedStakeNFT}\r\n              loading={loading}\r\n            />\r\n            <ButtonPrimary style={{ float: \"right\" }} onClick={onSelect}>\r\n              {confirmLoading ? (\r\n                <CircularProgress size='1.5rem' color=\"warning\" />\r\n              ) : (\r\n                \"CONFIRM\"\r\n              )}\r\n            </ButtonPrimary>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx",["96"],"import { Contract } from \"@ethersproject/contracts\";\r\nimport { useCall, useEthers } from \"@usedapp/core\";\r\n\r\nexport function useGetIsApprovedForAll(\r\n  contractAddress,\r\n  contractAbi,\r\n  stakingAddress,\r\n  address\r\n) {\r\n  const { value, error } =\r\n    useCall(\r\n      address &&\r\n        contractAddress && {\r\n          contract: new Contract(contractAddress, contractAbi), // instance of called contract\r\n          method: \"isApprovedForAll\", // Method to be called\r\n          args: [address, stakingAddress], // Method arguments - address to be checked for balance\r\n        }\r\n    ) ?? {};\r\n  if (error) {\r\n    console.error(error.message);\r\n    return undefined;\r\n  }\r\n  \r\n  return value?.[0];\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedMutants\\StakedMutants.jsx",["97","98","99","100","101"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx",["102","103","104","105"],"import classes from \"./TotalRewards.module.scss\";\r\nimport { ButtonPrimary } from \"../index\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useCall, useEthers } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport { useState, useContext } from \"react\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ethers } from \"ethers\";\r\n\r\nexport default function TotalRewards(props) {\r\n  const { account, chainId, library } = useEthers();\r\n  const [loading, setLoading] = useState(false);\r\n  const plan = props.plan;\r\n  const { error: totalRewardsError, value: totalRewardsValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.staking, abis.staking),\r\n        method: \"getEarnedRewards\",\r\n        args: [plan, account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (totalRewardsError) {\r\n    console.log(totalRewardsError);\r\n  } else {\r\n  }\r\n  const onClaim = async () => {\r\n    if (account) {\r\n      const signer = library.getSigner();\r\n      const mutantsStakingContract = new ethers.Contract(\r\n        addresses.staking,\r\n        abis.staking,\r\n        signer\r\n      );\r\n      if (Number(totalRewardsValue[0]) > 0) {\r\n        try {\r\n          await mutantsStakingContract.claimEarnedReward(plan);\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      }\r\n    }\r\n  };\r\n  return (\r\n    <div className={classes[\"prize-container\"]}>\r\n      <h2 style={{ padding: \"0.7rem\" }}>YOUR REWARDS</h2>\r\n      {account ? (\r\n        <div>\r\n          <Typography\r\n            sx={{ textAlign: \"center\", fontSize: \"16px\" }}\r\n            variant=\"h6\"\r\n            component=\"h6\"\r\n          >\r\n            TOTAL :\r\n          </Typography>\r\n\r\n          <Typography variant=\"h6\" component=\"h6\" sx={{ color: \"#7b9c13\" }}>\r\n            {totalRewardsValue &&\r\n              ethers.utils.formatEther(totalRewardsValue[0])}\r\n          </Typography>\r\n\r\n          <Typography\r\n            sx={{ textAlign: \"center\", fontSize: \"16px\" }}\r\n            variant=\"h6\"\r\n            component=\"h6\"\r\n          >\r\n            CLAIMABLE :\r\n          </Typography>\r\n\r\n          <Typography variant=\"h6\" component=\"h6\" sx={{ color: \"#7b9c13\" }}>\r\n            {totalRewardsValue &&\r\n              ethers.utils.formatEther(totalRewardsValue[1])}\r\n          </Typography>\r\n        </div>\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onClaim}>CLAIM</ButtonPrimary>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"106","severity":1,"message":"107","line":1,"column":17,"nodeType":"108","messageId":"109","endLine":1,"endColumn":26},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","replacedBy":"113"},{"ruleId":"106","severity":1,"message":"114","line":12,"column":8,"nodeType":"108","messageId":"109","endLine":12,"endColumn":13},{"ruleId":"115","severity":1,"message":"116","line":157,"column":13,"nodeType":"117","endLine":160,"endColumn":29},{"ruleId":"110","replacedBy":"118"},{"ruleId":"112","replacedBy":"119"},{"ruleId":"106","severity":1,"message":"120","line":10,"column":8,"nodeType":"108","messageId":"109","endLine":10,"endColumn":23},{"ruleId":"106","severity":1,"message":"121","line":3,"column":10,"nodeType":"108","messageId":"109","endLine":3,"endColumn":16},{"ruleId":"106","severity":1,"message":"122","line":8,"column":10,"nodeType":"108","messageId":"109","endLine":8,"endColumn":16},{"ruleId":"110","replacedBy":"123"},{"ruleId":"112","replacedBy":"124"},{"ruleId":"106","severity":1,"message":"121","line":6,"column":8,"nodeType":"108","messageId":"109","endLine":6,"endColumn":14},{"ruleId":"106","severity":1,"message":"125","line":8,"column":31,"nodeType":"108","messageId":"109","endLine":8,"endColumn":41},{"ruleId":"106","severity":1,"message":"126","line":26,"column":20,"nodeType":"108","messageId":"109","endLine":26,"endColumn":27},{"ruleId":"106","severity":1,"message":"127","line":78,"column":18,"nodeType":"108","messageId":"109","endLine":78,"endColumn":40},{"ruleId":"106","severity":1,"message":"128","line":2,"column":19,"nodeType":"108","messageId":"109","endLine":2,"endColumn":28},{"ruleId":"106","severity":1,"message":"129","line":2,"column":8,"nodeType":"108","messageId":"109","endLine":2,"endColumn":17},{"ruleId":"106","severity":1,"message":"130","line":3,"column":8,"nodeType":"108","messageId":"109","endLine":3,"endColumn":24},{"ruleId":"106","severity":1,"message":"131","line":4,"column":8,"nodeType":"108","messageId":"109","endLine":4,"endColumn":14},{"ruleId":"106","severity":1,"message":"125","line":11,"column":31,"nodeType":"108","messageId":"109","endLine":11,"endColumn":41},{"ruleId":"106","severity":1,"message":"127","line":81,"column":18,"nodeType":"108","messageId":"109","endLine":81,"endColumn":40},{"ruleId":"106","severity":1,"message":"125","line":6,"column":20,"nodeType":"108","messageId":"109","endLine":6,"endColumn":30},{"ruleId":"106","severity":1,"message":"126","line":11,"column":20,"nodeType":"108","messageId":"109","endLine":11,"endColumn":27},{"ruleId":"106","severity":1,"message":"132","line":12,"column":10,"nodeType":"108","messageId":"109","endLine":12,"endColumn":17},{"ruleId":"106","severity":1,"message":"133","line":12,"column":19,"nodeType":"108","messageId":"109","endLine":12,"endColumn":29},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["134"],"no-negated-in-lhs",["135"],"'Badge' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["134"],["135"],"'AgricultureIcon' is defined but never used.","'Button' is defined but never used.","'border' is defined but never used.",["134"],["135"],"'useContext' is defined but never used.","'chainId' is assigned a value but never used.","'setApprovalForAllState' is assigned a value but never used.","'useEthers' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
[{"D:\\dsdc-dashboard\\packages\\react-app\\src\\index.js":"1","D:\\dsdc-dashboard\\packages\\react-app\\src\\App.js":"2","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js":"3","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js":"4","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Swap.js":"5","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js":"6","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js":"7","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js":"8","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedMutants\\StakedMutants.jsx":"9","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx":"10","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx":"11","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js":"12","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx":"13","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx":"14","D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx":"15","D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetUserNFTs.jsx":"16","D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetStakedNFTs.jsx":"17","D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetTotalRewards.jsx":"18"},{"size":766,"mtime":1680099410280,"results":"19","hashOfConfig":"20"},{"size":293,"mtime":1678557708974,"results":"21","hashOfConfig":"20"},{"size":6263,"mtime":1680151740173,"results":"22","hashOfConfig":"20"},{"size":2037,"mtime":1680152464748,"results":"23","hashOfConfig":"20"},{"size":3639,"mtime":1680152672698,"results":"24","hashOfConfig":"20"},{"size":2396,"mtime":1680152115871,"results":"25","hashOfConfig":"20"},{"size":2126,"mtime":1680152153600,"results":"26","hashOfConfig":"20"},{"size":382,"mtime":1678675745008,"results":"27","hashOfConfig":"20"},{"size":8091,"mtime":1680140299030,"results":"28","hashOfConfig":"20"},{"size":7445,"mtime":1680132155959,"results":"29","hashOfConfig":"20"},{"size":2257,"mtime":1680111898023,"results":"30","hashOfConfig":"20"},{"size":2453,"mtime":1679931645173,"results":"31","hashOfConfig":"20"},{"size":2003,"mtime":1678501579110,"results":"32","hashOfConfig":"20"},{"size":2014,"mtime":1678679882833,"results":"33","hashOfConfig":"20"},{"size":691,"mtime":1680107051439,"results":"34","hashOfConfig":"20"},{"size":988,"mtime":1680109851601,"results":"35","hashOfConfig":"20"},{"size":1799,"mtime":1680132502415,"results":"36","hashOfConfig":"20"},{"size":1152,"mtime":1680138330330,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"a2ufmk",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"D:\\dsdc-dashboard\\packages\\react-app\\src\\index.js",[],["79","80"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\App.js",["81"],"import React, { useEffect } from \"react\";\nimport { Container} from \"./components\";\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  // Read more about useDapp on https://usedapp.io/\n  return (\n    <Container>\n      <Dashboard />\n    </Container>\n  );\n}\n\nexport default App;\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js",["82","83"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\Swap.js",["84","85"],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedMutants\\StakedMutants.jsx",["86","87","88","89","90"],"import { StakedImageList } from \"../StakedImageList/StakedImageList\";\r\nimport FormGroup from \"@mui/material/FormGroup\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Switch from \"@mui/material/Switch\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport classes from \"./StakedMutants.module.scss\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useCall, useEthers, useContractFunction } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport axios from \"axios\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ButtonPrimary, ButtonSecondary } from \"../index\";\r\nimport { ethers } from \"ethers\";\r\nimport { useGetIsApprovedForAll } from \"../../hooks/useGetIsApprovedForAll\";\r\nimport { UnstakedImageList } from \"../UnstakedImageList/UnstakedImageList\";\r\n\r\nexport default function StakedMutants(props) {\r\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\r\n  const [unstakedTokensOfOwner, setUnstakedTokensOfOwner] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const plan = 1;\r\n  const [selectedStakeNFT, setSelectedStakeNFT] = useState([]);\r\n  const [selectedUnstakeNFT, setSelectedUnstakeNFT] = useState([]);\r\n  const { account, library } = useEthers();\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"90%\",\r\n    bgcolor: \"background.paper\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n  };\r\n\r\n  const mutantsContract = new Contract(addresses.mutants, abis.mutants);\r\n\r\n  const isApprovedForAll = useGetIsApprovedForAll(\r\n    addresses.mutants,\r\n    abis.mutants,\r\n    addresses.staking,\r\n    account\r\n  );\r\n\r\n  const { error: walletOfOwnerError, value: walletOfOwnerValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.mutants, abis.mutants),\r\n        method: \"walletOfOwner\",\r\n        args: [account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (walletOfOwnerError) {\r\n    console.log(walletOfOwnerError);\r\n  }\r\n\r\n  const { error: stakedNftsError, value: stakedNftsValue } =\r\n    useCall(\r\n      account && {\r\n        contract: new Contract(addresses.staking, abis.staking),\r\n        method: \"getStakedTokens\",\r\n        args: [plan, account],\r\n      }\r\n    ) ?? {};\r\n\r\n  if (stakedNftsError) {\r\n    console.log(stakedNftsError);\r\n  }\r\n\r\n  const { state: setApprovalForAllState, send: setApprovalForAll } =\r\n    useContractFunction(mutantsContract, \"setApprovalForAll\", {\r\n      transactionName: \"setApprovalForAll\",\r\n    });\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const approveMaxDsdc = async () => {\r\n    await setApprovalForAll(addresses.staking, 1);\r\n  };\r\n\r\n  async function getNftsData(userNfts) {\r\n    const tokenData = [];\r\n    for (var j = 0; j < userNfts?.length; j++) {\r\n      const mutantsMetaData = await axios.get(\r\n        `https://drunkskunksdc.mypinata.cloud/ipfs/QmadV6pf2fzgmo3NDbx5fuyxNZUcTaNiGSKbNx3FoWkgAG/${userNfts[j]}.json`\r\n      );\r\n      const nftTokenData = {\r\n        img: `https://drunkskunksdc.mypinata.cloud/ipfs/${mutantsMetaData.data.image.slice(\r\n          7\r\n        )}`,\r\n        title: mutantsMetaData.data.name,\r\n        tokenId: userNfts[j],\r\n      };\r\n      tokenData.push(nftTokenData);\r\n    }\r\n\r\n    return tokenData;\r\n  }\r\n\r\n  const onPickClick = async () => {\r\n    if (account) {\r\n      setStakeLoading(true);\r\n      if (isApprovedForAll === undefined) {\r\n        setLoading(true);\r\n      } else {\r\n        setOpen(true);\r\n        setLoading(true);\r\n        setSelectedUnstakeNFT([]);\r\n        const allNfts = walletOfOwnerValue?.[0].map((e) => Number(e));\r\n        const tokensOfOwner = await getNftsData(allNfts);\r\n        setUnstakedTokensOfOwner(tokensOfOwner);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    setStakeLoading(false);\r\n  };\r\n\r\n  const onStake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedStakeNFT.length > 0) {\r\n      try {\r\n        console.log(\"plan\", plan);\r\n        console.log(\"selected Stake NFT\", selectedStakeNFT);\r\n        await dsdcStakingContract.stake(plan, selectedStakeNFT);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onUnstake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedUnstakeNFT.length > 0) {\r\n      setUnstakeLoading(true);\r\n      try {\r\n        await dsdcStakingContract.unstake(plan, selectedUnstakeNFT);\r\n        setUnstakeLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setUnstakeLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSelect = async () => {\r\n    setConfirmLoading(true);\r\n    if (isApprovedForAll === false) {\r\n      await approveMaxDsdc();\r\n      await onStake();\r\n      setConfirmLoading(false);\r\n      setOpen(false);\r\n      return;\r\n    }\r\n    await onStake();\r\n    setConfirmLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (account) {\r\n      const stakedNfts = stakedNftsValue?.[0].map((e) => Number(e));\r\n      console.log(\"staked nfts\", stakedNfts);\r\n      getData(stakedNfts);\r\n    }\r\n\r\n    async function getData(stakedNfts) {\r\n      const tokenData = await getNftsData(stakedNfts);\r\n      setTokensOfOwner(tokenData);\r\n    }\r\n  }, [account, stakedNftsValue]);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h2>YOUR STAKED MUTANT(S)</h2>\r\n      {stakedNftsValue?.[0].length > 0 ? (\r\n        loading ? (\r\n          <div className={classes.loading}>\r\n            <Typography\r\n              sx={{ marginBottom: \"35px\" }}\r\n              variant=\"h6\"\r\n              component=\"h4\"\r\n            >\r\n              Fetching your staked mutants...\r\n            </Typography>\r\n            <CircularProgress color=\"warning\" />\r\n          </div>\r\n        ) : (\r\n          <StakedImageList\r\n            selectedUnstakeNFT={selectedUnstakeNFT}\r\n            setSelectedUnstakeNFT={setSelectedUnstakeNFT}\r\n            itemData={tokensOfOwner}\r\n          />\r\n        )\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onPickClick}>\r\n          {stakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"STAKE\"}\r\n        </ButtonPrimary>\r\n        <ButtonSecondary onClick={onUnstake}>\r\n          {unstakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"UNSTAKE\"}\r\n        </ButtonSecondary>\r\n      </div>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Fade in={open}>\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n              SELECT YOUR MUTANT TO STAKE:\r\n            </Typography>\r\n\r\n            <UnstakedImageList\r\n              itemData={unstakedTokensOfOwner}\r\n              selectedStakeNFT={selectedStakeNFT}\r\n              setSelectedStakeNFT={setSelectedStakeNFT}\r\n              loading={loading}\r\n            />\r\n            <ButtonPrimary style={{ float: \"right\" }} onClick={onSelect}>\r\n              {confirmLoading ? (\r\n                <CircularProgress size='1.5rem' color=\"warning\" />\r\n              ) : (\r\n                \"CONFIRM\"\r\n              )}\r\n            </ButtonPrimary>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx",["91","92","93","94","95","96","97"],"import { StakedImageList } from \"../StakedImageList/StakedImageList\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Modal from \"@mui/material/Modal\";\r\nimport Fade from \"@mui/material/Fade\";\r\nimport classes from \"./StakedNfts.module.scss\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { useState, useEffect, useContext } from \"react\";\r\nimport { useCall, useEthers, useContractFunction } from \"@usedapp/core\";\r\nimport { Contract } from \"@ethersproject/contracts\";\r\nimport axios from \"axios\";\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { ButtonPrimary, ButtonSecondary } from \"../index\";\r\nimport { ethers } from \"ethers\";\r\nimport { useGetIsApprovedForAll } from \"../../hooks/useGetIsApprovedForAll\";\r\nimport { UnstakedImageList } from \"../UnstakedImageList/UnstakedImageList\";\r\n\r\nimport useGetUserNFTs from \"../../hooks/useGetUserNFTs\";\r\nimport useGetStakedNFTs from \"../../hooks/useGetStakedNFTs\";\r\n\r\nexport default function StakedNfts(props) {\r\n  const [tokensOfOwner, setTokensOfOwner] = useState([]);\r\n  const [unstakedTokensOfOwner, setUnstakedTokensOfOwner] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [open, setOpen] = useState(false);\r\n  const plan = 0;\r\n  const [selectedStakeNFT, setSelectedStakeNFT] = useState([]);\r\n  const [selectedUnstakeNFT, setSelectedUnstakeNFT] = useState([]);\r\n  const { account, chainId, library } = useEthers();\r\n  const [stakeLoading, setStakeLoading] = useState(false);\r\n  const [unstakeLoading, setUnstakeLoading] = useState(false);\r\n  const [confirmLoading, setConfirmLoading] = useState(false);\r\n\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    width: \"90%\",\r\n    bgcolor: \"background.paper\",\r\n    border: \"2px solid #000\",\r\n    boxShadow: 24,\r\n    padding: \"15px\",\r\n  };\r\n\r\n  const dsdcContract = new Contract(addresses.dsdc, abis.dsdc);\r\n\r\n  const isApprovedForAll = useGetIsApprovedForAll(\r\n    addresses.dsdc,\r\n    abis.dsdc,\r\n    addresses.staking,\r\n    account\r\n  );\r\n\r\n const walletOfOwnerValue = useGetUserNFTs();\r\n  console.log(\"users nfts\", walletOfOwnerValue); \r\n  \r\n  const stakedNftsValue = useGetStakedNFTs(plan);\r\n  console.log(\"users staked nfts\", stakedNftsValue); \r\n \r\n  const { state: setApprovalForAllState, send: setApprovalForAll } =\r\n    useContractFunction(dsdcContract, \"setApprovalForAll\", {\r\n      transactionName: \"setApprovalForAll\",\r\n    });\r\n\r\n  const handleClose = () => setOpen(false);\r\n\r\n  const approveMaxDsdc = async () => {\r\n    await setApprovalForAll(addresses.staking, 1);\r\n  };\r\n\r\n  async function getNftsData(userNfts) {\r\n    const tokenData = [];\r\n    for (var j = 0; j < userNfts?.length; j++) {\r\n      const dsdcMetaData = await axios.get(\r\n        `https://bafybeigmbv6qevyposswcncodvket6bl34chc4j6326akxg2xj6arkmfwu.ipfs.nftstorage.link/${userNfts[j]}.json`\r\n      );\r\n      const nftTokenData = {\r\n        img: `https://drunkskunksdc.mypinata.cloud/ipfs/${dsdcMetaData.data.image.slice(\r\n          7\r\n        )}`,\r\n        title: dsdcMetaData.data.name,\r\n        tokenId: userNfts[j],\r\n      };\r\n      tokenData.push(nftTokenData);\r\n    }\r\n\r\n    return tokenData;\r\n  }\r\n\r\n  const onPickClick = async () => {\r\n    if (account) {\r\n      setStakeLoading(true);\r\n      if (isApprovedForAll === undefined) {\r\n        setLoading(true);\r\n      } else {\r\n        setOpen(true);\r\n        setLoading(true);\r\n        setSelectedUnstakeNFT([]);\r\n        const tokensOfOwner = await getNftsData(walletOfOwnerValue);\r\n        setUnstakedTokensOfOwner(tokensOfOwner);\r\n        setLoading(false);\r\n      }\r\n    }\r\n    setStakeLoading(false);\r\n  };\r\n\r\n  const onStake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedStakeNFT.length > 0) {\r\n      try {\r\n        console.log(\"plan\", plan);\r\n        console.log(\"selected Stake NFT\", selectedStakeNFT);\r\n        await dsdcStakingContract.stake(plan, selectedStakeNFT);\r\n      } catch (error) {\r\n        console.log(error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onUnstake = async () => {\r\n    const signer = library.getSigner();\r\n    const dsdcStakingContract = new ethers.Contract(\r\n      addresses.staking,\r\n      abis.staking,\r\n      signer\r\n    );\r\n    if (selectedUnstakeNFT.length > 0) {\r\n      setUnstakeLoading(true);\r\n      try {\r\n        await dsdcStakingContract.unstake(plan, selectedUnstakeNFT);\r\n        setUnstakeLoading(false);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setUnstakeLoading(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const onSelect = async () => {\r\n    setConfirmLoading(true);\r\n    if (isApprovedForAll === false) {\r\n      await approveMaxDsdc();\r\n      await onStake();\r\n      setConfirmLoading(false);\r\n      setOpen(false);\r\n      return;\r\n    }\r\n    await onStake();\r\n    setConfirmLoading(false);\r\n    setOpen(false);\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (account && stakedNftsValue) {\r\n  //     getData(stakedNftsValue);\r\n  //   }\r\n\r\n  //   async function getData(stakedNfts) {\r\n  //     const tokenData = await getNftsData(stakedNfts);\r\n  //     setTokensOfOwner(tokenData);\r\n  //   }\r\n  // }, [account]);\r\n\r\n  \r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h2>YOUR STAKED DSDC(S)</h2>\r\n      {stakedNftsValue?.length > 0 ? (\r\n        loading ? (\r\n          <div className={classes.loading}>\r\n            <Typography\r\n              sx={{ marginBottom: \"35px\" }}\r\n              variant=\"h6\"\r\n              component=\"h4\"\r\n            >\r\n              Fetching your staked DSDC...\r\n            </Typography>\r\n            <CircularProgress color=\"warning\" />\r\n          </div>\r\n        ) : (\r\n          <StakedImageList\r\n            selectedUnstakeNFT={selectedUnstakeNFT}\r\n            setSelectedUnstakeNFT={setSelectedUnstakeNFT}\r\n            itemData={stakedNftsValue}\r\n          />\r\n        )\r\n      ) : (\r\n        <p>Nothing to show</p>\r\n      )}\r\n      <div className={classes.actions}>\r\n        <ButtonPrimary onClick={onPickClick}>\r\n          {stakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"STAKE\"}\r\n        </ButtonPrimary>\r\n        <ButtonSecondary onClick={onUnstake}>\r\n          {unstakeLoading ? <CircularProgress size='1.5rem' color=\"warning\" /> : \"UNSTAKE\"}\r\n        </ButtonSecondary>\r\n      </div>\r\n\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Fade in={open}>\r\n          <Box sx={style}>\r\n            <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n              SELECT YOUR DSDC TO STAKE:\r\n            </Typography>\r\n\r\n            <UnstakedImageList\r\n              itemData={unstakedTokensOfOwner}\r\n              selectedStakeNFT={selectedStakeNFT}\r\n              setSelectedStakeNFT={setSelectedStakeNFT}\r\n              loading={loading}\r\n            />\r\n            <ButtonPrimary style={{ float: \"right\" }} onClick={onSelect}>\r\n              {confirmLoading ? (\r\n                <CircularProgress size='1.5rem' color=\"warning\" />\r\n              ) : (\r\n                \"CONFIRM\"\r\n              )}\r\n            </ButtonPrimary>\r\n          </Box>\r\n        </Fade>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js",["98"],"import * as React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport logo from \"../../assets/images/logo.png\";\r\nimport mutantLogo from \"../../assets/images/mutants-logo.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classes from \"./MediaCard.module.css\"\r\nimport { ButtonPrimary } from '..';\r\n\r\nexport default function MediaCard(props) {\r\n  const defaultClass = props.mutants ? \"card--mutant\" : \"card\"\r\n  const uri = props.mutants ? `dsdc-mutants` : `dsdc`\r\n  const linkStyle = {\r\n    margin: \"0\",\r\n    fontFamily: \"Montserrat, sans-serif\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"1rem\",\r\n    lineHeight: \"1.5\",\r\n    display: \"block\",\r\n    color: \"#fff\",\r\n    textDecoration: \"none\"\r\n  }\r\n  const CardMediaStyle = props.mutants ? {\r\n    height: 190, backgroundSize: \"55%\"\r\n  } : {\r\n    height: 190, backgroundSize: \"45%\"\r\n  }\r\n  return (\r\n    <Card sx={{ backgroundImage: \"none\", border: \"1px solid #bfc500\", backgroundColor: \"transparent\" }} className={classes[defaultClass]}>\r\n      <CardMedia\r\n        sx={CardMediaStyle}\r\n        image={props.mutants ? mutantLogo : logo}\r\n        title={props.mutants ? \"DSDC Mutants Staking\" : \"DSDC Staking\"}\r\n      />\r\n      <CardContent sx={{ padding: \"14px\" }}>\r\n        <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n          {props.mutants ? \"Mutants Staking\" : \"DSDC Staking\"}\r\n        </Typography>\r\n        {props.mutants ? <>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            ◘ 10x Higher APR\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            ◘ 1 month lock\r\n          </Typography></> :\r\n          <>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              ◘ Lower APR\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n              ◘ Can unstake anytime\r\n            </Typography>\r\n          </>}\r\n      </CardContent>\r\n      <CardActions sx={{ justifyContent: \"center\", marginTop: \"50px\", marginBottom: \"20px\" }}>\r\n        <Link style={linkStyle} to={uri}>\r\n          <ButtonPrimary>Select</ButtonPrimary>\r\n        </Link>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetUserNFTs.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetStakedNFTs.jsx",[],"D:\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetTotalRewards.jsx",[],{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","severity":1,"message":"104","line":1,"column":17,"nodeType":"105","messageId":"106","endLine":1,"endColumn":26},{"ruleId":"103","severity":1,"message":"107","line":12,"column":8,"nodeType":"105","messageId":"106","endLine":12,"endColumn":13},{"ruleId":"108","severity":1,"message":"109","line":157,"column":13,"nodeType":"110","endLine":160,"endColumn":29},{"ruleId":"103","severity":1,"message":"111","line":3,"column":10,"nodeType":"105","messageId":"106","endLine":3,"endColumn":16},{"ruleId":"103","severity":1,"message":"112","line":8,"column":10,"nodeType":"105","messageId":"106","endLine":8,"endColumn":16},{"ruleId":"103","severity":1,"message":"113","line":2,"column":8,"nodeType":"105","messageId":"106","endLine":2,"endColumn":17},{"ruleId":"103","severity":1,"message":"114","line":3,"column":8,"nodeType":"105","messageId":"106","endLine":3,"endColumn":24},{"ruleId":"103","severity":1,"message":"115","line":4,"column":8,"nodeType":"105","messageId":"106","endLine":4,"endColumn":14},{"ruleId":"103","severity":1,"message":"116","line":11,"column":31,"nodeType":"105","messageId":"106","endLine":11,"endColumn":41},{"ruleId":"103","severity":1,"message":"117","line":81,"column":18,"nodeType":"105","messageId":"106","endLine":81,"endColumn":40},{"ruleId":"103","severity":1,"message":"104","line":8,"column":20,"nodeType":"105","messageId":"106","endLine":8,"endColumn":29},{"ruleId":"103","severity":1,"message":"116","line":8,"column":31,"nodeType":"105","messageId":"106","endLine":8,"endColumn":41},{"ruleId":"103","severity":1,"message":"118","line":9,"column":10,"nodeType":"105","messageId":"106","endLine":9,"endColumn":17},{"ruleId":"103","severity":1,"message":"119","line":22,"column":10,"nodeType":"105","messageId":"106","endLine":22,"endColumn":23},{"ruleId":"103","severity":1,"message":"120","line":22,"column":25,"nodeType":"105","messageId":"106","endLine":22,"endColumn":41},{"ruleId":"103","severity":1,"message":"121","line":29,"column":20,"nodeType":"105","messageId":"106","endLine":29,"endColumn":27},{"ruleId":"103","severity":1,"message":"117","line":61,"column":18,"nodeType":"105","messageId":"106","endLine":61,"endColumn":40},{"ruleId":"103","severity":1,"message":"111","line":6,"column":8,"nodeType":"105","messageId":"106","endLine":6,"endColumn":14},"no-native-reassign",["122"],"no-negated-in-lhs",["123"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Badge' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.","'border' is defined but never used.","'FormGroup' is defined but never used.","'FormControlLabel' is defined but never used.","'Switch' is defined but never used.","'useContext' is defined but never used.","'setApprovalForAllState' is assigned a value but never used.","'useCall' is defined but never used.","'tokensOfOwner' is assigned a value but never used.","'setTokensOfOwner' is assigned a value but never used.","'chainId' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]
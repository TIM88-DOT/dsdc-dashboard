[{"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\index.js":"1","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\App.js":"2","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js":"3","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js":"4","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\DefaultSwap.js":"5","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js":"6","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js":"7","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\StickyFooter.js":"8","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\Chart\\Chart.js":"9","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js":"10","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx":"11","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx":"12","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js":"13","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetUserNFTs.jsx":"14","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetTotalRewards.jsx":"15","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetStakedNFTs.jsx":"16","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx":"17","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx":"18","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx":"19","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\helpers\\getWalletShort.js":"20","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\helpers\\getNftsData.js":"21","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\helpers\\getTitle.js":"22","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\functions\\setApprovalForAll.js":"23"},{"size":520,"mtime":1683721360253,"results":"24","hashOfConfig":"25"},{"size":1203,"mtime":1684178991761,"results":"26","hashOfConfig":"25"},{"size":7166,"mtime":1684781872594,"results":"27","hashOfConfig":"25"},{"size":2194,"mtime":1683721360098,"results":"28","hashOfConfig":"25"},{"size":2045,"mtime":1683721359923,"results":"29","hashOfConfig":"25"},{"size":1351,"mtime":1683721360065,"results":"30","hashOfConfig":"25"},{"size":3148,"mtime":1684801046830,"results":"31","hashOfConfig":"25"},{"size":1231,"mtime":1683721360011,"results":"32","hashOfConfig":"25"},{"size":1410,"mtime":1681919344600,"results":"33","hashOfConfig":"25"},{"size":556,"mtime":1683721359941,"results":"34","hashOfConfig":"25"},{"size":2225,"mtime":1683721360031,"results":"35","hashOfConfig":"25"},{"size":6510,"mtime":1683725851923,"results":"36","hashOfConfig":"25"},{"size":2936,"mtime":1683721359928,"results":"37","hashOfConfig":"25"},{"size":999,"mtime":1683722174841,"results":"38","hashOfConfig":"25"},{"size":561,"mtime":1684250313385,"results":"39","hashOfConfig":"25"},{"size":1120,"mtime":1684250394957,"results":"40","hashOfConfig":"25"},{"size":913,"mtime":1684250360345,"results":"41","hashOfConfig":"25"},{"size":2009,"mtime":1683303405988,"results":"42","hashOfConfig":"25"},{"size":2000,"mtime":1680567705442,"results":"43","hashOfConfig":"25"},{"size":170,"mtime":1683721360174,"results":"44","hashOfConfig":"25"},{"size":1143,"mtime":1683725105812,"results":"45","hashOfConfig":"25"},{"size":369,"mtime":1683721360159,"results":"46","hashOfConfig":"25"},{"size":992,"mtime":1683721360132,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"199u3ov",{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\index.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\App.js",["125"],[],"import React, { useEffect } from \"react\";\r\nimport { Container } from \"./components\";\r\nimport Dashboard from \"./components/Dashboard\";\r\nimport { EthereumClient, w3mConnectors, w3mProvider } from '@web3modal/ethereum'\r\nimport { Web3Modal } from '@web3modal/react'\r\nimport { configureChains, createClient, WagmiConfig } from 'wagmi'\r\nimport { bsc } from 'wagmi/chains'\r\n\r\n\r\nfunction App() {\r\n  const chains = [bsc]\r\n  const projectId = '55ce67f74172a4fdea4813ac99488323'\r\n\r\n  const { provider } = configureChains(chains, [w3mProvider({ projectId })])\r\n  const wagmiClient = createClient({\r\n    autoConnect: true,\r\n    connectors: w3mConnectors({ projectId, version: 1, chains }),\r\n    provider\r\n  })\r\n  const ethereumClient = new EthereumClient(wagmiClient, chains)\r\n  \r\n  return (\r\n    <>\r\n      <WagmiConfig client={wagmiClient}>\r\n        <Container>\r\n          <Dashboard />\r\n        {/* <StickyFooter /> */}\r\n\r\n        </Container>\r\n\r\n        <Web3Modal themeVariables={{\r\n            '--w3m-background-color': '#bfc500',\r\n            '--w3m-accent-color': '#bfc500'\r\n          }} projectId={projectId} ethereumClient={ethereumClient} />\r\n      </WagmiConfig>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\Dashboard.js",["126","127","128"],[],"import * as React from 'react';\r\nimport { styled, createTheme, ThemeProvider } from '@mui/material/styles';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport Box from '@mui/material/Box';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Badge from '@mui/material/Badge';\r\nimport Container from '@mui/material/Container';\r\nimport Grid from '@mui/material/Grid';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport logo from \"../logo.png\";\r\nimport { mainListItems, secondaryListItems } from './listItems';\r\nimport { grey } from '@mui/material/colors';\r\nimport { Route, Routes } from 'react-router-dom';\r\nimport NftStaking from './NftStaking/NftStaking';\r\nimport StakedNfts from './StakedNfts/StakedNfts';\r\nimport WalletButton from './WalletButton';\r\nimport TotalRewards from './TotalRewards/TotalRewards';\r\nimport DefaultSwap from './DefaultSwap';\r\nimport Chart from './Chart/Chart';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    '& .MuiDrawer-paper': {\r\n      position: 'relative',\r\n      whiteSpace: 'nowrap',\r\n      height: '100vh',\r\n      width: drawerWidth,\r\n      backgroundColor: \"#020202\",\r\n      transition: theme.transitions.create('width', {\r\n        easing: theme.transitions.easing.sharp,\r\n        duration: theme.transitions.duration.enteringScreen,\r\n      }),\r\n      boxSizing: 'border-box',\r\n      ...(!open && {\r\n        overflowX: 'hidden',\r\n        transition: theme.transitions.create('width', {\r\n          easing: theme.transitions.easing.sharp,\r\n          duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        width: theme.spacing(7),\r\n        [theme.breakpoints.up('sm')]: {\r\n          width: theme.spacing(9),\r\n        },\r\n      }),\r\n    },\r\n  }),\r\n);\r\n\r\nconst theme = createTheme({\r\n\r\n});\r\n\r\nconst mdTheme = createTheme({\r\n  palette: {\r\n    mode: 'dark',\r\n    primary: {\r\n      main: '#bfc500',\r\n    },\r\n    divider: '#bfc500',\r\n    text: {\r\n      primary: '#fff',\r\n      secondary: grey[500],\r\n    },\r\n\r\n  },\r\n  typography: {\r\n    fontFamily: \"Montserrat, sans-serif\",\r\n    fontSize: 12, // Set the font size to 10\r\n  },\r\n  \r\n  components: {\r\n    // Name of the component\r\n    ListItemIcon: {\r\n      styleOverrides: {\r\n        // Name of the slot\r\n        root: {\r\n          // Some CSS\r\n          padding: '8px 4px',\r\n        },\r\n      },\r\n    },\r\n  },\r\n  spacing: (factor) => `${0.25 * factor}rem`,\r\n});\r\n\r\nmdTheme.spacing(2);\r\n\r\nfunction DashboardContent() {\r\n  const [open, setOpen] = React.useState(true);\r\n  const toggleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={mdTheme}>\r\n      <Box sx={{ display: 'flex' }}>\r\n        <CssBaseline />\r\n        <AppBar position=\"absolute\" open={open}>\r\n          <Toolbar\r\n            sx={{\r\n              backgroundColor: \"#020202\",\r\n              borderBottom: \"1px solid #bfc500\",\r\n              pr: '24px', // keep right padding when drawer closed\r\n            }}\r\n          >\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              aria-label=\"open drawer\"\r\n              onClick={toggleDrawer}\r\n              sx={{\r\n                marginRight: '36px',\r\n                ...(open && { display: 'none' }),\r\n              }}\r\n            >\r\n              <MenuIcon />\r\n            </IconButton>\r\n\r\n            <WalletButton />\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Drawer variant=\"permanent\" open={open}>\r\n          <Toolbar\r\n            sx={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'flex-end',\r\n              px: [1],\r\n              backgroundColor: (theme) => \"#020202\"\r\n            }}\r\n          >\r\n            <img style={{\r\n              width: \"9em\",\r\n              margin: \"auto\"\r\n            }} src={logo} />\r\n            <IconButton onClick={toggleDrawer}>\r\n              <ChevronLeftIcon />\r\n            </IconButton>\r\n          </Toolbar>\r\n          <Divider />\r\n          <List component=\"nav\">\r\n            {mainListItems}\r\n            <Divider sx={{ my: 1 }} />\r\n            {secondaryListItems}\r\n          </List>\r\n        </Drawer>\r\n        <Box\r\n          component=\"main\"\r\n          sx={{\r\n            backgroundColor: (theme) => \"#020202\",\r\n            flexGrow: 1,\r\n            height: '100vh',\r\n            overflow: 'auto',\r\n          }}\r\n        >\r\n          <Toolbar />\r\n          <Container maxWidth=\"lg\" sx={{ mt: 1, mb: 4 }}>\r\n            <Grid container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\" item xs={12}>\r\n              <Routes>\r\n                <Route path=\"/\" element={<DefaultSwap />} />\r\n                <Route path=\"chart\" element={<Chart />} />\r\n                <Route path=\"stake\" element={<NftStaking />} />\r\n                <Route path=\"stake/dsdc\" element={\r\n                  <>\r\n                    <Grid container\r\n                      direction=\"column\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\">\r\n                      <StakedNfts plan={0} />\r\n                      <TotalRewards plan={0} />\r\n                    </Grid>\r\n                  </>} />\r\n                <Route path=\"stake/dsdc-mutants\" element={\r\n                  <>\r\n                    <Grid container\r\n                      direction=\"column\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\">\r\n                      <StakedNfts plan={1} />\r\n                      <TotalRewards plan={1} />\r\n                    </Grid>\r\n                  </>} />\r\n                <Route path=\"stake/ssss\" element={\r\n                  <>\r\n                    <Grid container\r\n                      direction=\"column\"\r\n                      justifyContent=\"center\"\r\n                      alignItems=\"center\">\r\n                      <StakedNfts plan={2} />\r\n                      <TotalRewards plan={2} />\r\n                    </Grid>\r\n                  </>} />\r\n              </Routes>\r\n            </Grid>\r\n          </Container>\r\n\r\n        </Box>\r\n      </Box>\r\n\r\n\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default function Dashboard() {\r\n  return <DashboardContent />;\r\n}\r\n","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\index.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\DefaultSwap.js",["129"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useMediaQuery } from \"@mui/material\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst DefaultSwap = () => {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const iframeRef = useRef(null);\r\n    const mobile = useMediaQuery(\"(max-width:500px)\");\r\n    const handleLoad = () => {\r\n        setIsLoaded(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const iframe = iframeRef.current;\r\n        if (iframe) {\r\n            iframe.addEventListener(\"load\", handleLoad);\r\n            return () => iframe.removeEventListener(\"load\", handleLoad);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{zIndex: 2,  marginBlock: '50px' }}>\r\n            {!isLoaded && <div style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n                paddingBottom: \"230%\"\r\n            }}>\r\n                <Typography sx={{\r\n                    marginBottom: \"35px\"\r\n                }} variant=\"h6\" component=\"h4\">\r\n                    Loading Swap...\r\n                </Typography>\r\n                <CircularProgress color=\"warning\" />\r\n            </div>}\r\n\r\n            <iframe\r\n                style={{ display: isLoaded ? \"block\" : \"none\" }}\r\n                ref={iframeRef}\r\n                width={mobile ? \"320\" : \"400\"}\r\n                height=\"650\"\r\n                frameborder=\"0\"\r\n                allow=\"clipboard-read *; clipboard-write *; web-share *; accelerometer *; autoplay *; camera *; gyroscope *; payment *; geolocation *\"\r\n                src=\"https://flooz.trade/embed/trade?swapDisabled=false&swapToTokenAddress=0x4E2970252B0b294cD041004093e9bA39e5286504&swapLockToToken=true&onRampDisabled=true&onRampAsDefault=false&onRampDefaultAmount=200&network=bsc&lightMode=false&primaryColor=%23bfc500&roundedCorners=10&padding=20\" >\r\n\r\n            </iframe>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DefaultSwap;","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\WalletButton.js",["130"],[],"import { Button } from \"../components\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport { useWeb3Modal } from \"@web3modal/react\";\r\n\r\nimport { useAccount, useDisconnect, useEnsName, useNetwork, useSwitchNetwork } from \"wagmi\";\r\n\r\nimport getWalletShort from '../helpers/getWalletShort';\r\n\r\nexport default function WalletButton() {\r\n\r\n  const { open } = useWeb3Modal();\r\n  const { isConnected, address } = useAccount();\r\n  const { data: ensName } = useEnsName({ address })\r\n  const { disconnect } = useDisconnect()\r\n\r\n  const { chain } = useNetwork()\r\n  const { chains, error, isLoading, pendingChainId, switchNetwork } =\r\n    useSwitchNetwork()\r\n\r\n\r\n  const label = (address !== '' && address !== undefined) ? (ensName ?? getWalletShort(address)) : \"CONNECT WALLET\";\r\n\r\n\r\n  const onConnectClick = async () => {\r\n    if (!isConnected) {\r\n      open();\r\n    } else {\r\n      disconnect();\r\n    }\r\n\r\n  };\r\n\r\n\r\n  useEffect(() => {\r\n    if (chain?.id !== chains[0]?.id) {\r\n      switchNetwork?.(chains[0]?.id)\r\n    }\r\n    if (error) {\r\n      console.error(\"Error while connecting wallet:\", error.message);\r\n    }\r\n  }, [chain, chains, error, switchNetwork]);\r\n\r\n  return (\r\n    <Button\r\n      onClick={() => onConnectClick()}\r\n    >\r\n      {isLoading && pendingChainId === chains[0]?.id ? 'SWITCHING NETWORK...' : label}\r\n    </Button>\r\n  );\r\n}","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\listItems.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\StickyFooter.js",["131"],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\Chart\\Chart.js",["132"],[],"import React, { useState, useEffect, useRef } from \"react\";\r\nimport classes from \"./Chart.module.css\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\n\r\nconst Chart = () => {\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const iframeRef = useRef(null);\r\n    const handleLoad = () => {\r\n        setIsLoaded(true);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const iframe = iframeRef.current;\r\n        if (iframe) {\r\n            iframe.addEventListener(\"load\", handleLoad);\r\n            return () => iframe.removeEventListener(\"load\", handleLoad);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ marginBlock: '100px' }}>\r\n            {!isLoaded && <div style={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n            }}>\r\n                <Typography sx={{\r\n                    marginBottom: \"35px\"\r\n                }} variant=\"h6\" component=\"h4\">\r\n                    Loading Chart...\r\n                </Typography>\r\n                <CircularProgress color=\"warning\" />\r\n            </div>}\r\n\r\n            <div id={classes[\"dexscreener-embed\"]}>\r\n                <iframe src=\"https://dexscreener.com/bsc/0xA8beEbeeF1bE5265D7eFa64857F1c5C59F53dC98?embed=1&theme=dark&trades=0\"></iframe></div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Chart;","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\NftStaking\\NftStaking.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\TotalRewards\\TotalRewards.jsx",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedNfts\\StakedNfts.jsx",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\MediaCard\\MediaCard.js",["133"],[],"import * as React from 'react';\r\nimport Card from '@mui/material/Card';\r\nimport CardActions from '@mui/material/CardActions';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Button from '@mui/material/Button';\r\nimport Typography from '@mui/material/Typography';\r\nimport ogLogo from \"../../assets/images/logo.jpg\";\r\nimport mutantLogo from \"../../assets/images/mutants-logo.png\";\r\nimport stonersLogo from \"../../assets/images/stoned.png\";\r\nimport { Link } from \"react-router-dom\";\r\nimport classes from \"./MediaCard.module.css\"\r\nimport { ButtonPrimary } from '..';\r\n\r\nexport default function MediaCard(props) {\r\n  let defaultClass;\r\n  let uri;\r\n  let logo;\r\n  let title; \r\n  let descriptionOne;\r\n  switch (props.plan) {\r\n    case 0:\r\n      defaultClass = \"card\";\r\n      uri = \"dsdc\";\r\n      logo = ogLogo;\r\n      title = \"DSDC Staking\";\r\n      descriptionOne = \"lower APR\"\r\n      break;\r\n    case 1:\r\n      defaultClass = \"card--mutant\";\r\n      uri = \"dsdc-mutants\"\r\n      logo = mutantLogo;\r\n      title = \"Mutants Staking\";\r\n      descriptionOne = \"Higher APR\"\r\n      break;\r\n    case 2:\r\n      uri = \"ssss\"\r\n      logo = stonersLogo;\r\n      title = \"SSSS Staking\";\r\n      defaultClass = \"card\";\r\n      descriptionOne = \"Higher APR\"\r\n      break;\r\n    default:\r\n      defaultClass = \"card\"\r\n      break;\r\n  }\r\n  const linkStyle = {\r\n    margin: \"0\",\r\n    fontFamily: \"Montserrat, sans-serif\",\r\n    fontWeight: \"400\",\r\n    fontSize: \"1rem\",\r\n    lineHeight: \"1.5\",\r\n    display: \"block\",\r\n    color: \"#fff\",\r\n    textDecoration: \"none\"\r\n  }\r\n  const CardMediaStyle = {\r\n    height: 190,\r\n    backgroundSize: \"50%\"\r\n  }\r\n\r\n  return (\r\n    <Card sx={{ backgroundImage: \"none\", border: \"1px solid #bfc500\", backgroundColor: \"transparent\" }} className={classes[defaultClass]}>\r\n      <CardMedia\r\n        sx={CardMediaStyle}\r\n        image={logo}\r\n        title={title}\r\n      />\r\n      <CardContent sx={{ textAlign: \"center\", padding: \"14px\" }}>\r\n        <Typography sx={{ whiteSpace: \"nowrap\" }} gutterBottom variant=\"h5\" component=\"div\">\r\n          {title}\r\n        </Typography>\r\n        {props.mutants ? <>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {descriptionOne}\r\n          </Typography>\r\n          <Typography variant=\"body2\" color=\"text.secondary\">\r\n            No Lock\r\n          </Typography></> :\r\n          <>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n            {descriptionOne}\r\n            </Typography>\r\n            <Typography variant=\"body2\" color=\"text.secondary\">\r\n            No Lock\r\n            </Typography>\r\n          </>}\r\n      </CardContent>\r\n      <CardActions sx={{ justifyContent: \"center\", marginTop: \"50px\", marginBottom: \"20px\" }}>\r\n        <Link style={linkStyle} to={uri}>\r\n          <ButtonPrimary>Select</ButtonPrimary>\r\n        </Link>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetUserNFTs.jsx",["134"],[],"import { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { useAccount, useContractRead } from \"wagmi\";\r\n\r\nconst useGetUserNFTs = (plan) => {\r\n  const { address } = useAccount();\r\n  let contractAddress;\r\n  let contractAbi;\r\n\r\n  switch (plan) {\r\n    case 0:\r\n      contractAddress = addresses.dsdc;\r\n      contractAbi = abis.dsdc;\r\n      break;\r\n    case 1:\r\n      contractAddress = addresses.mutants\r\n      contractAbi = abis.mutants\r\n      break;\r\n    case 2:\r\n      contractAddress = addresses.stoned\r\n      contractAbi = abis.stoned\r\n      break\r\n    default:\r\n      break;\r\n  }\r\n\r\n  const { data, isError, isLoading } = useContractRead({\r\n    address: contractAddress,\r\n    abi: contractAbi,\r\n    functionName: plan === 1 ? 'tokensOfOwner' : 'walletOfOwner',\r\n    args: [address],\r\n    watch: true\r\n  })\r\n  if (isError) {\r\n    console.error(\"error getting walletOfOwner\");\r\n    return undefined;\r\n  }\r\n\r\n  return data?.map(e => e.toString());\r\n\r\n\r\n};\r\n\r\nexport default useGetUserNFTs;","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetTotalRewards.jsx",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetStakedNFTs.jsx",["135"],[],"import { useState, useEffect, useMemo, useCallback } from \"react\";\r\nimport { useContractRead } from 'wagmi'\r\nimport { addresses, abis } from \"@uniswap-v2-app/contracts\";\r\nimport { useAccount } from \"wagmi\";\r\nimport getNftsData from \"../helpers/getNftsData\";\r\n\r\nconst useGetStakedNFTs = (plan) => {\r\n\r\n  const [stakedNftsValue, setStakedNftsValue] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { address } = useAccount();\r\n\r\n  const { data, isError, error } = useContractRead({\r\n    address: addresses.staking,\r\n    abi: abis.staking,\r\n    functionName: 'getStakedTokens',\r\n    args: [plan, address],\r\n    watch: true\r\n  })\r\n  if (isError) {\r\n    console.error(\"error getting Staked Tokens\", error);\r\n  }\r\n\r\n  const getData = useCallback(async () => {\r\n    setIsLoading(true);\r\n\r\n    const tokenData = await getNftsData(plan, data.map((e) => Number(e)));\r\n    setStakedNftsValue(tokenData);\r\n    setIsLoading(false);\r\n  }, [data, plan]);\r\n\r\n\r\n  useEffect(() => {\r\n    getData();\r\n  }, [getData, data]);\r\n\r\n  return { isLoading, stakedNftsValue };\r\n};\r\n\r\nexport default useGetStakedNFTs;\r\n","D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\hooks\\useGetIsApprovedForAll.jsx",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\StakedImageList\\StakedImageList.jsx",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\components\\UnstakedImageList\\UnstakedImageList.jsx",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\helpers\\getWalletShort.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\helpers\\getNftsData.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\helpers\\getTitle.js",[],[],"D:\\pcs\\dsdc-dashboard\\packages\\react-app\\src\\functions\\setApprovalForAll.js",[],[],{"ruleId":"136","severity":1,"message":"137","line":1,"column":17,"nodeType":"138","messageId":"139","endLine":1,"endColumn":26},{"ruleId":"136","severity":1,"message":"140","line":11,"column":8,"nodeType":"138","messageId":"139","endLine":11,"endColumn":13},{"ruleId":"136","severity":1,"message":"141","line":75,"column":7,"nodeType":"138","messageId":"139","endLine":75,"endColumn":12},{"ruleId":"142","severity":1,"message":"143","line":158,"column":13,"nodeType":"144","endLine":161,"endColumn":29},{"ruleId":"145","severity":1,"message":"146","line":38,"column":13,"nodeType":"144","endLine":45,"endColumn":304},{"ruleId":"136","severity":1,"message":"147","line":2,"column":28,"nodeType":"138","messageId":"139","endLine":2,"endColumn":36},{"ruleId":"136","severity":1,"message":"148","line":2,"column":8,"nodeType":"138","messageId":"139","endLine":2,"endColumn":19},{"ruleId":"145","severity":1,"message":"146","line":37,"column":17,"nodeType":"144","endLine":37,"endColumn":130},{"ruleId":"136","severity":1,"message":"149","line":6,"column":8,"nodeType":"138","messageId":"139","endLine":6,"endColumn":14},{"ruleId":"136","severity":1,"message":"150","line":26,"column":26,"nodeType":"138","messageId":"139","endLine":26,"endColumn":35},{"ruleId":"136","severity":1,"message":"151","line":1,"column":31,"nodeType":"138","messageId":"139","endLine":1,"endColumn":38},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'Badge' is defined but never used.","'theme' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","'useState' is defined but never used.","'CssBaseline' is defined but never used.","'Button' is defined but never used.","'isLoading' is assigned a value but never used.","'useMemo' is defined but never used."]